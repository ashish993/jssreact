{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\asha\\\\Documents\\\\ASHA\\\\sitecorejss\\\\test\\\\my-react-jss-app\\\\src\\\\components\\\\GraphQL-IntegratedDemo\\\\index.js\";\nimport React from 'react';\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nvar GraphQLIntegratedDemo = props => {\n  // Query results in integrated GraphQL replace the normal `fields` data\n  // i.e. with { data, }\n  var _props$fields$data = props.fields.data,\n      datasource = _props$fields$data.datasource,\n      contextItem = _props$fields$data.contextItem;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-e2e-id\": \"graphql-integrated\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"GraphQL Integrated Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Integrated GraphQL executes GraphQL queries within the Layout Service endpoint, and merges the query results into the Layout Service result JSON. The query results can be seen by inspecting the Layout Service response in the browser devtools network tab.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), datasource && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Datasource Item (via Integrated GraphQL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), \"id: \", datasource.id, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this), \"name: \", datasource.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), \"sample1: \", datasource.sample1.value, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), \"sample1 (editable): \", /*#__PURE__*/_jsxDEV(Text, {\n        field: datasource.sample1.jss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), \"sample2:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"text: \", datasource.sample2.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"url: \", datasource.sample2.url]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"target: \", datasource.sample2.target]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"editable: \", /*#__PURE__*/_jsxDEV(Link, {\n            field: datasource.sample2.jss\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"field type: \", datasource.sample2.definition.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"field is shared?: \", datasource.sample2.definition.shared.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), contextItem && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Route Item (via Integrated GraphQL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), \"id: \", contextItem.id, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), \"page title: \", contextItem.pageTitle.value, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), \"children:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: contextItem.children.map(child => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(RouterLink, {\n            to: child.url,\n            children: child.pageTitle.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), \"\\xA0 (editable title too! \", /*#__PURE__*/_jsxDEV(Text, {\n            field: child.pageTitle.jss\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 28\n          }, this), \")\"]\n        }, child.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = GraphQLIntegratedDemo;\nexport default GraphQLIntegratedDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphQLIntegratedDemo\");","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/src/components/GraphQL-IntegratedDemo/index.js"],"names":["React","Text","Link","RouterLink","GraphQLIntegratedDemo","props","fields","data","datasource","contextItem","id","name","sample1","value","jss","sample2","text","url","target","definition","type","shared","toString","pageTitle","children","map","child"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nconst GraphQLIntegratedDemo = (props) => {\r\n  // Query results in integrated GraphQL replace the normal `fields` data\r\n  // i.e. with { data, }\r\n  const { datasource, contextItem } = props.fields.data;\r\n\r\n  return (\r\n    <div data-e2e-id=\"graphql-integrated\">\r\n      <h2>GraphQL Integrated Demo</h2>\r\n\r\n      <p>\r\n        Integrated GraphQL executes GraphQL queries within the Layout Service endpoint, and merges\r\n        the query results into the Layout Service result JSON. The query results can be seen by\r\n        inspecting the Layout Service response in the browser devtools network tab.\r\n      </p>\r\n\r\n      {datasource && (\r\n        <div>\r\n          <h4>Datasource Item (via Integrated GraphQL)</h4>\r\n          id: {datasource.id}\r\n          <br />\r\n          name: {datasource.name}\r\n          <br />\r\n          sample1: {datasource.sample1.value}\r\n          <br />\r\n          sample1 (editable): <Text field={datasource.sample1.jss} />\r\n          <br />\r\n          sample2:\r\n          <br />\r\n          <ul>\r\n            <li>text: {datasource.sample2.text}</li>\r\n            <li>url: {datasource.sample2.url}</li>\r\n            <li>target: {datasource.sample2.target}</li>\r\n            <li>\r\n              editable: <Link field={datasource.sample2.jss} />\r\n            </li>\r\n            <li>field type: {datasource.sample2.definition.type}</li>\r\n            <li>field is shared?: {datasource.sample2.definition.shared.toString()}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {contextItem && (\r\n        <div>\r\n          <h4>Route Item (via Integrated GraphQL)</h4>\r\n          id: {contextItem.id}\r\n          <br />\r\n          page title: {contextItem.pageTitle.value}\r\n          <br />\r\n          children:\r\n          <ul>\r\n            {contextItem.children.map((child) => (\r\n              <li key={child.id}>\r\n                <RouterLink to={child.url}>{child.pageTitle.value}</RouterLink>&nbsp; (editable\r\n                title too! <Text field={child.pageTitle.jss} />)\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphQLIntegratedDemo;\r\n"]},"metadata":{},"sourceType":"module"}