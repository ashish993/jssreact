{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectSpread from \"C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\asha\\\\Documents\\\\ASHA\\\\sitecorejss\\\\test\\\\my-react-jss-app\\\\src\\\\lib\\\\GraphQLData.js\";\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { withSitecoreContext, resetExperienceEditorChromes } from '@sitecore-jss/sitecore-jss-react';\n/**\r\n * Higher order component that abstracts common JSS + Apollo integration needs.\r\n *\r\n * This component works similar to react-apollo's graphql() HOC, but:\r\n * * Automatically injects $contextItem and $datasource GraphQL variable values, if the GraphQL declares usage of them\r\n * * Automatically disables execution of subscription queries when doing SSR\r\n * * Passes through any other props to its wrapped component\r\n *\r\n * @param {*} query The GraphQL AST to execute (should go through graphql-tag, no strings)\r\n * @param {*} configuration Values passed in are shipped to react-apollo configuration (https://www.apollographql.com/docs/react/basics/setup.html#graphql-config)\r\n */\n\nfunction GraphQLData(query, configuration = {}) {\n  return function wrapComponent(Component) {\n    class SitecoreRenderingWrapper extends React.Component {\n      render() {\n        if (!query) {\n          throw new Error('query was falsy in GraphQLData. It should be a GraphQL query from graphql-tag. Perhaps missing graphql-tag/loader?');\n        }\n\n        var newConfiguration = _objectSpread({}, configuration);\n\n        if (!newConfiguration.name) newConfiguration.name = 'data'; // ensure variables object exists\n\n        newConfiguration.options = newConfiguration.options || {};\n        newConfiguration.options.variables = newConfiguration.options.variables || {}; // if we're in experience editor or preview we need to disable SSR of GraphQL queries\n        // because SSR queries are made unauthenticated, so they would have normal mode data = bad\n\n        if (this.props.sitecoreContext && this.props.sitecoreContext.pageState !== 'normal') {\n          newConfiguration.options.ssr = false;\n        } else if (query.definitions.some(def => def.kind === 'OperationDefinition' && def.operation === 'subscription')) {\n          // if the document includes any subscriptions, we also disable SSR as this hangs the SSR process\n          // not to mention being quite silly to SSR when they're reactive\n          newConfiguration.options.ssr = false;\n        } // find all variable definitions in the GraphQL query, so we can send only ones we're using\n\n\n        var variableNames = extractVariableNames(query); // set the datasource variable, if we're using it\n\n        if (variableNames.datasource && this.props.rendering && this.props.rendering.dataSource) {\n          newConfiguration.options.variables.datasource = this.props.rendering.dataSource;\n        } // set the contextItem variable, if we're using it\n\n\n        if (variableNames.contextItem && this.props.sitecoreContext && this.props.sitecoreContext.itemId) {\n          newConfiguration.options.variables.contextItem = this.props.sitecoreContext.itemId;\n        } // build the props processing function that will set the result object to the name\n\n\n        newConfiguration.props = props => {\n          var innerQuery = props[newConfiguration.name];\n          var resultProps = {};\n          resultProps[newConfiguration.name] = innerQuery; // run a user-specified props function too if one exists\n\n          if (configuration.props) {\n            resultProps = Object.assign(resultProps, configuration.props(props));\n          }\n\n          return resultProps;\n        };\n\n        var GQL = graphql(query, newConfiguration)(Component);\n        return /*#__PURE__*/_jsxDEV(GQL, _objectSpread({}, this.props), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 16\n        }, this);\n      } // eslint-disable-next-line class-methods-use-this\n\n\n      componentDidUpdate() {\n        resetExperienceEditorChromes();\n      }\n\n    }\n\n    SitecoreRenderingWrapper.displayName = \"JSSGraphQLComponent(\".concat(Component.displayName || Component.name || 'Component', \")\");\n    return withSitecoreContext()(SitecoreRenderingWrapper);\n  };\n}\n\n_c = GraphQLData;\n\nfunction extractVariableNames(query) {\n  var variableNames = {};\n  query.definitions.map(def => def.variableDefinitions).filter(def => def).forEach(defs => defs.forEach(def => {\n    if (def.kind && def.kind === 'VariableDefinition') {\n      variableNames[def.variable.name.value] = true;\n    }\n  }));\n  return variableNames;\n}\n\nexport default GraphQLData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphQLData\");","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/src/lib/GraphQLData.js"],"names":["React","graphql","withSitecoreContext","resetExperienceEditorChromes","GraphQLData","query","configuration","wrapComponent","Component","SitecoreRenderingWrapper","render","Error","newConfiguration","name","options","variables","props","sitecoreContext","pageState","ssr","definitions","some","def","kind","operation","variableNames","extractVariableNames","datasource","rendering","dataSource","contextItem","itemId","innerQuery","resultProps","Object","assign","GQL","componentDidUpdate","displayName","map","variableDefinitions","filter","forEach","defs","variable","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport {\r\n  withSitecoreContext,\r\n  resetExperienceEditorChromes,\r\n} from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/**\r\n * Higher order component that abstracts common JSS + Apollo integration needs.\r\n *\r\n * This component works similar to react-apollo's graphql() HOC, but:\r\n * * Automatically injects $contextItem and $datasource GraphQL variable values, if the GraphQL declares usage of them\r\n * * Automatically disables execution of subscription queries when doing SSR\r\n * * Passes through any other props to its wrapped component\r\n *\r\n * @param {*} query The GraphQL AST to execute (should go through graphql-tag, no strings)\r\n * @param {*} configuration Values passed in are shipped to react-apollo configuration (https://www.apollographql.com/docs/react/basics/setup.html#graphql-config)\r\n */\r\nfunction GraphQLData(query, configuration = {}) {\r\n  return function wrapComponent(Component) {\r\n    class SitecoreRenderingWrapper extends React.Component {\r\n      static displayName = `JSSGraphQLComponent(${\r\n        Component.displayName || Component.name || 'Component'\r\n      })`;\r\n\r\n      render() {\r\n        if (!query) {\r\n          throw new Error(\r\n            'query was falsy in GraphQLData. It should be a GraphQL query from graphql-tag. Perhaps missing graphql-tag/loader?'\r\n          );\r\n        }\r\n\r\n        const newConfiguration = { ...configuration };\r\n\r\n        if (!newConfiguration.name) newConfiguration.name = 'data';\r\n\r\n        // ensure variables object exists\r\n        newConfiguration.options = newConfiguration.options || {};\r\n        newConfiguration.options.variables = newConfiguration.options.variables || {};\r\n\r\n        // if we're in experience editor or preview we need to disable SSR of GraphQL queries\r\n        // because SSR queries are made unauthenticated, so they would have normal mode data = bad\r\n        if (this.props.sitecoreContext && this.props.sitecoreContext.pageState !== 'normal') {\r\n          newConfiguration.options.ssr = false;\r\n        } else if (\r\n          query.definitions.some(\r\n            (def) => def.kind === 'OperationDefinition' && def.operation === 'subscription'\r\n          )\r\n        ) {\r\n          // if the document includes any subscriptions, we also disable SSR as this hangs the SSR process\r\n          // not to mention being quite silly to SSR when they're reactive\r\n          newConfiguration.options.ssr = false;\r\n        }\r\n\r\n        // find all variable definitions in the GraphQL query, so we can send only ones we're using\r\n        const variableNames = extractVariableNames(query);\r\n\r\n        // set the datasource variable, if we're using it\r\n        if (variableNames.datasource && this.props.rendering && this.props.rendering.dataSource) {\r\n          newConfiguration.options.variables.datasource = this.props.rendering.dataSource;\r\n        }\r\n\r\n        // set the contextItem variable, if we're using it\r\n        if (\r\n          variableNames.contextItem &&\r\n          this.props.sitecoreContext &&\r\n          this.props.sitecoreContext.itemId\r\n        ) {\r\n          newConfiguration.options.variables.contextItem = this.props.sitecoreContext.itemId;\r\n        }\r\n\r\n        // build the props processing function that will set the result object to the name\r\n        newConfiguration.props = (props) => {\r\n          const innerQuery = props[newConfiguration.name];\r\n\r\n          let resultProps = {};\r\n\r\n          resultProps[newConfiguration.name] = innerQuery;\r\n\r\n          // run a user-specified props function too if one exists\r\n          if (configuration.props) {\r\n            resultProps = Object.assign(resultProps, configuration.props(props));\r\n          }\r\n\r\n          return resultProps;\r\n        };\r\n\r\n        const GQL = graphql(query, newConfiguration)(Component);\r\n        return <GQL {...this.props} />;\r\n      }\r\n\r\n      // eslint-disable-next-line class-methods-use-this\r\n      componentDidUpdate() {\r\n        resetExperienceEditorChromes();\r\n      }\r\n    }\r\n\r\n    return withSitecoreContext()(SitecoreRenderingWrapper);\r\n  };\r\n}\r\n\r\nfunction extractVariableNames(query) {\r\n  const variableNames = {};\r\n  query.definitions\r\n    .map((def) => def.variableDefinitions)\r\n    .filter((def) => def)\r\n    .forEach((defs) =>\r\n      defs.forEach((def) => {\r\n        if (def.kind && def.kind === 'VariableDefinition') {\r\n          variableNames[def.variable.name.value] = true;\r\n        }\r\n      })\r\n    );\r\n\r\n  return variableNames;\r\n}\r\n\r\nexport default GraphQLData;\r\n"]},"metadata":{},"sourceType":"module"}