{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\asha\\\\Documents\\\\ASHA\\\\sitecorejss\\\\test\\\\my-react-jss-app\\\\src\\\\components\\\\GraphQL-ConnectedDemo\\\\index.js\";\nimport React from 'react';\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport GraphQLData from '../../lib/GraphQLData';\nvar ConnectedDemoQuery = {\n  \"kind\": \"Document\",\n  \"definitions\": [{\n    \"kind\": \"OperationDefinition\",\n    \"operation\": \"query\",\n    \"name\": {\n      \"kind\": \"Name\",\n      \"value\": \"ConnectedDemoQuery\"\n    },\n    \"variableDefinitions\": [{\n      \"kind\": \"VariableDefinition\",\n      \"variable\": {\n        \"kind\": \"Variable\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"datasource\"\n        }\n      },\n      \"type\": {\n        \"kind\": \"NonNullType\",\n        \"type\": {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"String\"\n          }\n        }\n      },\n      \"directives\": []\n    }, {\n      \"kind\": \"VariableDefinition\",\n      \"variable\": {\n        \"kind\": \"Variable\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"contextItem\"\n        }\n      },\n      \"type\": {\n        \"kind\": \"NonNullType\",\n        \"type\": {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"String\"\n          }\n        }\n      },\n      \"directives\": []\n    }],\n    \"directives\": [],\n    \"selectionSet\": {\n      \"kind\": \"SelectionSet\",\n      \"selections\": [{\n        \"kind\": \"Field\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"datasource\"\n        },\n        \"arguments\": [{\n          \"kind\": \"Argument\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"value\"\n          },\n          \"value\": {\n            \"kind\": \"Variable\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"datasource\"\n            }\n          }\n        }],\n        \"directives\": [],\n        \"selectionSet\": {\n          \"kind\": \"SelectionSet\",\n          \"selections\": [{\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"id\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"name\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"InlineFragment\",\n            \"typeCondition\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"GraphQLConnectedDemo\"\n              }\n            },\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"sample1\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"jss\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": []\n                  }, {\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"value\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": []\n                  }]\n                }\n              }, {\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"sample2\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"jss\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": []\n                  }, {\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"text\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": []\n                  }, {\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"target\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": []\n                  }, {\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"url\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": []\n                  }, {\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"definition\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"type\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"shared\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }]\n        }\n      }, {\n        \"kind\": \"Field\",\n        \"alias\": {\n          \"kind\": \"Name\",\n          \"value\": \"contextItem\"\n        },\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"item\"\n        },\n        \"arguments\": [{\n          \"kind\": \"Argument\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"path\"\n          },\n          \"value\": {\n            \"kind\": \"Variable\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"contextItem\"\n            }\n          }\n        }],\n        \"directives\": [],\n        \"selectionSet\": {\n          \"kind\": \"SelectionSet\",\n          \"selections\": [{\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"id\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"InlineFragment\",\n            \"typeCondition\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"AppRoute\"\n              }\n            },\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"pageTitle\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"value\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": []\n                  }]\n                }\n              }]\n            }\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"children\"\n            },\n            \"arguments\": [{\n              \"kind\": \"Argument\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"requirePresentation\"\n              },\n              \"value\": {\n                \"kind\": \"BooleanValue\",\n                \"value\": true\n              }\n            }],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"id\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }, {\n                \"kind\": \"InlineFragment\",\n                \"typeCondition\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"AppRoute\"\n                  }\n                },\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"pageTitle\"\n                    },\n                    \"arguments\": [],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"value\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"jss\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }]\n                    }\n                  }]\n                }\n              }, {\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"url\"\n                },\n                \"arguments\": [{\n                  \"kind\": \"Argument\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"options\"\n                  },\n                  \"value\": {\n                    \"kind\": \"ObjectValue\",\n                    \"fields\": [{\n                      \"kind\": \"ObjectField\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"disableLanguageEmbedding\"\n                      },\n                      \"value\": {\n                        \"kind\": \"BooleanValue\",\n                        \"value\": true\n                      }\n                    }]\n                  }\n                }],\n                \"directives\": []\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }],\n  \"loc\": {\n    \"start\": 0,\n    \"end\": 2030,\n    \"source\": {\n      \"body\": \"# This file contains a GraphQL query that will be executed and the result provided to\\n# your JSS component. You can run this query in GraphiQL ($endpoint/ui) for a nice editing experience.\\n\\n# Note that we're executing _two queries_ (datasource and contextItem)\\n# within the context of the ConnectedDemoQuery _operation_. This makes it\\n# very efficient at gathering data from multiple sources.\\n\\nquery ConnectedDemoQuery($datasource: String!, $contextItem: String!) {\\n  # Datasource query\\n  # $datasource will always be set to the ID of the rendering's datasource item\\n  # (as long as the GraphQLData helper is used)\\n  datasource(value: $datasource) {\\n    id\\n    name\\n    # Strongly-typed querying on known templates is possible!\\n    ...on GraphQLConnectedDemo {\\n      # Single-line text field\\n      sample1 {\\n        # the 'jss' field is a JSON blob that represents the object that\\n        # should be passed to JSS field rendering helpers (i.e. text, image, link)\\n        jss\\n        value\\n      }\\n      # General Link field\\n      sample2 {\\n        jss\\n        # Structured querying of the field's values is possible\\n        text\\n        target\\n        url\\n        # Access to the template definition is possible\\n        definition {\\n          type\\n          shared\\n        }\\n      }\\n    }\\n  }\\n\\n  # Context/route item query\\n  # $contextItem will always be set to the ID of the current context item (the route item)\\n  # (as long as the GraphQLData helper is used)\\n  contextItem: item(path: $contextItem) {\\n    id\\n    # Get the page title from the app route template\\n    ...on AppRoute {\\n      pageTitle {\\n        value\\n      }\\n    }\\n\\n    # List the children of the current route\\n    children(requirePresentation: true) {\\n      id\\n      # typing fragments can be used anywhere!\\n      # so in this case, we're grabbing the 'pageTitle'\\n      # field on all child route items.\\n      ...on AppRoute {\\n        pageTitle {\\n          value\\n          jss\\n        }\\n      }\\n      url(options: { disableLanguageEmbedding: true })\\n    }\\n  }\\n}\\n\",\n      \"name\": \"GraphQL request\",\n      \"locationOffset\": {\n        \"line\": 1,\n        \"column\": 1\n      }\n    }\n  }\n};\n\nvar GraphQLConnectedDemo = props => {\n  var graphQLResult = props.connectedQuery; // Async loading and error handling\n  // Remember to never return null from a JSS component when loading,\n  // this will break Experience Editor.\n\n  var error = graphQLResult.error,\n      loading = graphQLResult.loading; // Query results load in using the name of their root field (see query.graphql)\n\n  var datasource = graphQLResult.datasource,\n      contextItem = graphQLResult.contextItem;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-e2e-id\": \"graphql-connected\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"GraphQL Connected Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected GraphQL executes GraphQL queries directly against the Sitecore GraphQL endpoint. You can review the query execution in the browser devtools network tab. Note that Apollo Client maintains a query cache - so the same query will not execute twice (i.e. after route changes) unless either the page is refreshed, or the \", /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"fetch policy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 62\n      }, this), \" is set to not use the cache. Consult the Apollo documentation for details.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert alert-info\",\n      children: \"GraphQL query is executing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert alert-danger\",\n      children: [\"GraphQL query error: \", error.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this), datasource && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Datasource Item (via Connected GraphQL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), \"id: \", datasource.id, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), \"name: \", datasource.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), \"sample1: \", datasource.sample1.value, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), \"sample1 (editable): \", /*#__PURE__*/_jsxDEV(Text, {\n        field: datasource.sample1.jss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), \"sample2:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"text: \", datasource.sample2.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"url: \", datasource.sample2.url]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"target: \", datasource.sample2.target]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"editable: \", /*#__PURE__*/_jsxDEV(Link, {\n            field: datasource.sample2.jss\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"field type: \", datasource.sample2.definition.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"field is shared?: \", datasource.sample2.definition.shared.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), contextItem && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Route Item (via Connected GraphQL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), \"id: \", contextItem.id, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), \"page title: \", contextItem.pageTitle.value, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), \"children:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: contextItem.children.map(child => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(RouterLink, {\n            to: child.url,\n            children: child.pageTitle.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), \"\\xA0 (editable title too! \", /*#__PURE__*/_jsxDEV(Text, {\n            field: child.pageTitle.jss\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 28\n          }, this), \")\"]\n        }, child.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}; // compose() (from react-apollo) can be used when you need more than one GraphQL query\n// for a single query, e.g. `compose(GraphQLData(q1), GraphQLData(q2))(component)`\n\n\n_c = GraphQLConnectedDemo;\nexport default GraphQLData(ConnectedDemoQuery, {\n  name: 'connectedQuery'\n})(GraphQLConnectedDemo);\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphQLConnectedDemo\");","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/src/components/GraphQL-ConnectedDemo/index.js"],"names":["React","Text","Link","RouterLink","GraphQLData","ConnectedDemoQuery","GraphQLConnectedDemo","props","graphQLResult","connectedQuery","error","loading","datasource","contextItem","toString","id","name","sample1","value","jss","sample2","text","url","target","definition","type","shared","pageTitle","children","map","child"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Text, Link } from '@sitecore-jss/sitecore-jss-react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { loader as gqlLoader } from 'graphql.macro';\r\nimport GraphQLData from '../../lib/GraphQLData';\r\n\r\nconst ConnectedDemoQuery = gqlLoader('./query.graphql');\r\n\r\nconst GraphQLConnectedDemo = (props) => {\r\n  const graphQLResult = props.connectedQuery;\r\n\r\n  // Async loading and error handling\r\n  // Remember to never return null from a JSS component when loading,\r\n  // this will break Experience Editor.\r\n  const { error, loading } = graphQLResult;\r\n\r\n  // Query results load in using the name of their root field (see query.graphql)\r\n  const { datasource, contextItem } = graphQLResult;\r\n\r\n  return (\r\n    <div data-e2e-id=\"graphql-connected\">\r\n      <h2>GraphQL Connected Demo</h2>\r\n\r\n      <p>\r\n        Connected GraphQL executes GraphQL queries directly against the Sitecore GraphQL endpoint.\r\n        You can review the query execution in the browser devtools network tab. Note that Apollo\r\n        Client maintains a query cache - so the same query will not execute twice (i.e. after route\r\n        changes) unless either the page is refreshed, or the <em>fetch policy</em> is set to not use\r\n        the cache. Consult the Apollo documentation for details.\r\n      </p>\r\n\r\n      {loading && <p className=\"alert alert-info\">GraphQL query is executing...</p>}\r\n      {error && <p className=\"alert alert-danger\">GraphQL query error: {error.toString()}</p>}\r\n      {datasource && (\r\n        <div>\r\n          <h4>Datasource Item (via Connected GraphQL)</h4>\r\n          id: {datasource.id}\r\n          <br />\r\n          name: {datasource.name}\r\n          <br />\r\n          sample1: {datasource.sample1.value}\r\n          <br />\r\n          sample1 (editable): <Text field={datasource.sample1.jss} />\r\n          <br />\r\n          sample2:\r\n          <br />\r\n          <ul>\r\n            <li>text: {datasource.sample2.text}</li>\r\n            <li>url: {datasource.sample2.url}</li>\r\n            <li>target: {datasource.sample2.target}</li>\r\n            <li>\r\n              editable: <Link field={datasource.sample2.jss} />\r\n            </li>\r\n            <li>field type: {datasource.sample2.definition.type}</li>\r\n            <li>field is shared?: {datasource.sample2.definition.shared.toString()}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {contextItem && (\r\n        <div>\r\n          <h4>Route Item (via Connected GraphQL)</h4>\r\n          id: {contextItem.id}\r\n          <br />\r\n          page title: {contextItem.pageTitle.value}\r\n          <br />\r\n          children:\r\n          <ul>\r\n            {contextItem.children.map((child) => (\r\n              <li key={child.id}>\r\n                <RouterLink to={child.url}>{child.pageTitle.value}</RouterLink>&nbsp; (editable\r\n                title too! <Text field={child.pageTitle.jss} />)\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// compose() (from react-apollo) can be used when you need more than one GraphQL query\r\n// for a single query, e.g. `compose(GraphQLData(q1), GraphQLData(q2))(component)`\r\nexport default GraphQLData(ConnectedDemoQuery, { name: 'connectedQuery' })(GraphQLConnectedDemo);\r\n"]},"metadata":{},"sourceType":"module"}