{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectSpread from \"C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\asha\\\\Documents\\\\ASHA\\\\sitecorejss\\\\test\\\\my-react-jss-app\\\\src\\\\AppRoot.js\";\nimport React from 'react';\nimport { SitecoreContext } from '@sitecore-jss/sitecore-jss-react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport componentFactory from './temp/componentFactory';\nimport RouteHandler from './RouteHandler'; // This is the main JSX entry point of the app invoked by the renderer (server or client rendering).\n// By default the app's normal rendering is delegated to <RouteHandler> that handles the loading of JSS route data.\n// support languages in the URL prefix\n// e.g. /da-DK/path, or /en/path, or /path\n\nexport var routePatterns = ['/:lang([a-z]{2}-[A-Z]{2})/:sitecoreRoute*', '/:lang([a-z]{2})/:sitecoreRoute*', '/:sitecoreRoute*']; // wrap the app with:\n// ApolloProvider: provides an instance of Apollo GraphQL client to the app to make Connected GraphQL queries.\n//    Not needed if not using connected GraphQL.\n// SitecoreContext: provides component resolution and context services via withSitecoreContext\n// Router: provides a basic routing setup that will resolve Sitecore item routes and allow for language URL prefixes.\n\nclass AppRoot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setSsrRenderComplete = ssrRenderComplete => this.setState({\n      ssrRenderComplete\n    });\n\n    this.state = {\n      ssrRenderComplete: false\n    };\n\n    if (props.ssrState) {\n      this.sitecoreContext = props.ssrState.sitecore && props.ssrState.sitecore.route ? _objectSpread({\n        route: props.ssrState.sitecore.route,\n        itemId: props.ssrState.sitecore.route.itemId\n      }, props.ssrState.sitecore.context) : props.ssrState.sitecore.context;\n    } else {\n      this.sitecoreContext = null;\n    }\n  }\n\n  componentDidMount() {\n    this.setSsrRenderComplete(true);\n  }\n\n  render() {\n    var _this$props = this.props,\n        path = _this$props.path,\n        Router = _this$props.Router,\n        graphQLClient = _this$props.graphQLClient;\n    return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: graphQLClient,\n      children: /*#__PURE__*/_jsxDEV(SitecoreContext, {\n        componentFactory: componentFactory,\n        context: this.sitecoreContext,\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          location: path,\n          context: {},\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: routePatterns.map(routePattern => /*#__PURE__*/_jsxDEV(Route, {\n              path: routePattern,\n              render: props => /*#__PURE__*/_jsxDEV(RouteHandler, {\n                route: props,\n                ssrRenderComplete: this.state.ssrRenderComplete\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this)\n            }, routePattern, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AppRoot;","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/src/AppRoot.js"],"names":["React","SitecoreContext","Route","Switch","ApolloProvider","componentFactory","RouteHandler","routePatterns","AppRoot","Component","constructor","props","setSsrRenderComplete","ssrRenderComplete","setState","state","ssrState","sitecoreContext","sitecore","route","itemId","context","componentDidMount","render","path","Router","graphQLClient","map","routePattern"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AACA;AAEA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAG,CAC3B,2CAD2B,EAE3B,kCAF2B,EAG3B,kBAH2B,CAAtB,C,CAMP;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBR,KAAK,CAACS,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAqBnBC,oBArBmB,GAqBKC,iBAAD,IACrB,KAAKC,QAAL,CAAc;AACZD,MAAAA;AADY,KAAd,CAtBiB;;AAGjB,SAAKE,KAAL,GAAa;AACXF,MAAAA,iBAAiB,EAAE;AADR,KAAb;;AAIA,QAAIF,KAAK,CAACK,QAAV,EAAoB;AAClB,WAAKC,eAAL,GACEN,KAAK,CAACK,QAAN,CAAeE,QAAf,IAA2BP,KAAK,CAACK,QAAN,CAAeE,QAAf,CAAwBC,KAAnD;AAEMA,QAAAA,KAAK,EAAER,KAAK,CAACK,QAAN,CAAeE,QAAf,CAAwBC,KAFrC;AAGMC,QAAAA,MAAM,EAAET,KAAK,CAACK,QAAN,CAAeE,QAAf,CAAwBC,KAAxB,CAA8BC;AAH5C,SAIST,KAAK,CAACK,QAAN,CAAeE,QAAf,CAAwBG,OAJjC,IAMIV,KAAK,CAACK,QAAN,CAAeE,QAAf,CAAwBG,OAP9B;AAQD,KATD,MASO;AACL,WAAKJ,eAAL,GAAuB,IAAvB;AACD;AACF;;AAODK,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,oBAAL,CAA0B,IAA1B;AACD;;AAEDW,EAAAA,MAAM,GAAG;AAAA,sBACiC,KAAKZ,KADtC;AAAA,QACCa,IADD,eACCA,IADD;AAAA,QACOC,MADP,eACOA,MADP;AAAA,QACeC,aADf,eACeA,aADf;AAGP,wBACE,QAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,aAAxB;AAAA,6BACE,QAAC,eAAD;AAAiB,QAAA,gBAAgB,EAAErB,gBAAnC;AAAqD,QAAA,OAAO,EAAE,KAAKY,eAAnE;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEO,IAAlB;AAAwB,UAAA,OAAO,EAAE,EAAjC;AAAA,iCACE,QAAC,MAAD;AAAA,sBACGjB,aAAa,CAACoB,GAAd,CAAmBC,YAAD,iBACjB,QAAC,KAAD;AAEE,cAAA,IAAI,EAAEA,YAFR;AAGE,cAAA,MAAM,EAAGjB,KAAD,iBACN,QAAC,YAAD;AAAc,gBAAA,KAAK,EAAEA,KAArB;AAA4B,gBAAA,iBAAiB,EAAE,KAAKI,KAAL,CAAWF;AAA1D;AAAA;AAAA;AAAA;AAAA;AAJJ,eACOe,YADP;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AArDmC;;AAwDtC,eAAepB,OAAf","sourcesContent":["import React from 'react';\r\nimport { SitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport componentFactory from './temp/componentFactory';\r\nimport RouteHandler from './RouteHandler';\r\n\r\n// This is the main JSX entry point of the app invoked by the renderer (server or client rendering).\r\n// By default the app's normal rendering is delegated to <RouteHandler> that handles the loading of JSS route data.\r\n\r\n// support languages in the URL prefix\r\n// e.g. /da-DK/path, or /en/path, or /path\r\nexport const routePatterns = [\r\n  '/:lang([a-z]{2}-[A-Z]{2})/:sitecoreRoute*',\r\n  '/:lang([a-z]{2})/:sitecoreRoute*',\r\n  '/:sitecoreRoute*',\r\n];\r\n\r\n// wrap the app with:\r\n// ApolloProvider: provides an instance of Apollo GraphQL client to the app to make Connected GraphQL queries.\r\n//    Not needed if not using connected GraphQL.\r\n// SitecoreContext: provides component resolution and context services via withSitecoreContext\r\n// Router: provides a basic routing setup that will resolve Sitecore item routes and allow for language URL prefixes.\r\nclass AppRoot extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ssrRenderComplete: false,\r\n    };\r\n\r\n    if (props.ssrState) {\r\n      this.sitecoreContext =\r\n        props.ssrState.sitecore && props.ssrState.sitecore.route\r\n          ? {\r\n              route: props.ssrState.sitecore.route,\r\n              itemId: props.ssrState.sitecore.route.itemId,\r\n              ...props.ssrState.sitecore.context,\r\n            }\r\n          : props.ssrState.sitecore.context;\r\n    } else {\r\n      this.sitecoreContext = null;\r\n    }\r\n  }\r\n\r\n  setSsrRenderComplete = (ssrRenderComplete) =>\r\n    this.setState({\r\n      ssrRenderComplete,\r\n    });\r\n\r\n  componentDidMount() {\r\n    this.setSsrRenderComplete(true);\r\n  }\r\n\r\n  render() {\r\n    const { path, Router, graphQLClient } = this.props;\r\n\r\n    return (\r\n      <ApolloProvider client={graphQLClient}>\r\n        <SitecoreContext componentFactory={componentFactory} context={this.sitecoreContext}>\r\n          <Router location={path} context={{}}>\r\n            <Switch>\r\n              {routePatterns.map((routePattern) => (\r\n                <Route\r\n                  key={routePattern}\r\n                  path={routePattern}\r\n                  render={(props) => (\r\n                    <RouteHandler route={props} ssrRenderComplete={this.state.ssrRenderComplete} />\r\n                  )}\r\n                />\r\n              ))}\r\n            </Switch>\r\n          </Router>\r\n        </SitecoreContext>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRoot;\r\n"]},"metadata":{},"sourceType":"module"}