{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // what is `import x = require('x');`? great question: https://github.com/Microsoft/TypeScript/issues/5073\n\nvar unescape = require(\"lodash.unescape\");\n\nvar URL = require(\"url-parse\"); // finds an img tag with HTML attributes\n\n\nvar imgTagRegex = /<img([^>]+)\\/>/i; // finds all the HTML attributes in a string\n\nvar htmlAttrsRegex = /([^=\\s]+)(=\"([^\"]*)\")?/gi; // finds the Sitecore media URL prefix\n\nvar mediaUrlPrefixRegex = /\\/([-~]{1})\\/media\\//i;\n/**\n * Makes a request to Sitecore Content Service for the specified item path.\n * @param {string} editorMarkup\n * @returns {Object | null} found image tag\n */\n\nexports.findEditorImageTag = function (editorMarkup) {\n  // match the tag\n  var tagMatch = editorMarkup.match(imgTagRegex);\n\n  if (!tagMatch || tagMatch.length < 2) {\n    return null;\n  } // find the attrs and turn them into a Map\n\n\n  var attrs = {};\n  var match = htmlAttrsRegex.exec(tagMatch[1]);\n\n  while (match !== null) {\n    attrs[match[1]] = unescape(match[3]);\n    match = htmlAttrsRegex.exec(tagMatch[1]);\n  }\n\n  return {\n    imgTag: tagMatch[0],\n    attrs: attrs\n  };\n};\n/**\n * Get required query string params which should be merged with user params\n * @param {object} qs layout service parsed query string\n * @returns {object} requiredParams\n */\n\n\nexports.getRequiredParams = function (qs) {\n  var rev = qs.rev,\n      db = qs.db,\n      la = qs.la,\n      vs = qs.vs,\n      ts = qs.ts;\n  return {\n    rev: rev,\n    db: db,\n    la: la,\n    vs: vs,\n    ts: ts\n  };\n};\n/**\n * Receives a Sitecore media URL and replaces `/~/media` or `/-/media` with `/~/jssmedia` or `/-/jssmedia`, respectively.\n * Can use `mediaUrlPrefix` in order to use custom checker.\n * This replacement allows the JSS media handler to be used for JSS app assets.\n * Also, any provided `params` are used as the querystring parameters for the media URL.\n * @param {string} url\n * @param {Object} [params]\n * @param {RegExp} [mediaUrlPrefix=mediaUrlPrefixRegex]\n * @returns {string} url\n */\n\n\nexports.updateImageUrl = function (url, params, mediaUrlPrefix) {\n  if (mediaUrlPrefix === void 0) {\n    mediaUrlPrefix = mediaUrlPrefixRegex;\n  } // polyfill node `global` in browser to workaround https://github.com/unshiftio/url-parse/issues/150\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  if (typeof window !== 'undefined' && !window.global) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.global = {};\n  }\n\n  var parsed = URL(url, {}, true);\n\n  var query = __assign({}, params || parsed.query); // In case if imageParams provided\n\n\n  if (params) {\n    var requiredParams = exports.getRequiredParams(parsed.query);\n    Object.entries(requiredParams).forEach(function (_a) {\n      var key = _a[0],\n          param = _a[1];\n\n      if (param) {\n        query[key] = param;\n      }\n    });\n  }\n\n  parsed.set('query', query);\n  var match = mediaUrlPrefix.exec(parsed.pathname);\n\n  if (match && match.length > 1) {\n    // regex will provide us with /-/ or /~/ type\n    parsed.set('pathname', parsed.pathname.replace(mediaUrlPrefix, \"/\" + match[1] + \"/jssmedia/\"));\n  }\n\n  return parsed.toString();\n};\n/**\n * Receives an array of `srcSet` parameters that are iterated and used as parameters to generate\n * a corresponding set of updated Sitecore media URLs via @see updateImageUrl. The result is a comma-delimited\n * list of media URLs with respective dimension parameters.\n *\n * @example\n * // returns '/ipsum.jpg?h=1000&w=1000 1000w, /ipsum.jpg?mh=250&mw=250 250w'\n * getSrcSet('/ipsum.jpg', [{ h: 1000, w: 1000 }, { mh: 250, mw: 250 } ])\n *\n * More information about `srcSet`: {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img}\n *\n * @param {string} url\n * @param {Array} srcSet\n * @param {Object} [imageParams]\n * @param {RegExp} [mediaUrlPrefix]\n * @returns {string} src set\n */\n\n\nexports.getSrcSet = function (url, srcSet, imageParams, mediaUrlPrefix) {\n  return srcSet.map(function (params) {\n    var newParams = __assign(__assign({}, imageParams), params);\n\n    var imageWidth = newParams.w || newParams.mw;\n\n    if (!imageWidth) {\n      return null;\n    }\n\n    return exports.updateImageUrl(url, newParams, mediaUrlPrefix) + \" \" + imageWidth + \"w\";\n  }).filter(function (value) {\n    return value;\n  }).join(', ');\n};","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/node_modules/@sitecore-jss/sitecore-jss/dist/mediaApi.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","unescape","require","URL","imgTagRegex","htmlAttrsRegex","mediaUrlPrefixRegex","findEditorImageTag","editorMarkup","tagMatch","match","attrs","exec","imgTag","getRequiredParams","qs","rev","db","la","vs","ts","updateImageUrl","url","params","mediaUrlPrefix","window","global","parsed","query","requiredParams","entries","forEach","_a","key","param","set","pathname","replace","toString","getSrcSet","srcSet","imageParams","map","newParams","imageWidth","w","mw","filter","join"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// what is `import x = require('x');`? great question: https://github.com/Microsoft/TypeScript/issues/5073\nvar unescape = require(\"lodash.unescape\");\nvar URL = require(\"url-parse\");\n// finds an img tag with HTML attributes\nvar imgTagRegex = /<img([^>]+)\\/>/i;\n// finds all the HTML attributes in a string\nvar htmlAttrsRegex = /([^=\\s]+)(=\"([^\"]*)\")?/gi;\n// finds the Sitecore media URL prefix\nvar mediaUrlPrefixRegex = /\\/([-~]{1})\\/media\\//i;\n/**\n * Makes a request to Sitecore Content Service for the specified item path.\n * @param {string} editorMarkup\n * @returns {Object | null} found image tag\n */\nexports.findEditorImageTag = function (editorMarkup) {\n    // match the tag\n    var tagMatch = editorMarkup.match(imgTagRegex);\n    if (!tagMatch || tagMatch.length < 2) {\n        return null;\n    }\n    // find the attrs and turn them into a Map\n    var attrs = {};\n    var match = htmlAttrsRegex.exec(tagMatch[1]);\n    while (match !== null) {\n        attrs[match[1]] = unescape(match[3]);\n        match = htmlAttrsRegex.exec(tagMatch[1]);\n    }\n    return {\n        imgTag: tagMatch[0],\n        attrs: attrs,\n    };\n};\n/**\n * Get required query string params which should be merged with user params\n * @param {object} qs layout service parsed query string\n * @returns {object} requiredParams\n */\nexports.getRequiredParams = function (qs) {\n    var rev = qs.rev, db = qs.db, la = qs.la, vs = qs.vs, ts = qs.ts;\n    return { rev: rev, db: db, la: la, vs: vs, ts: ts };\n};\n/**\n * Receives a Sitecore media URL and replaces `/~/media` or `/-/media` with `/~/jssmedia` or `/-/jssmedia`, respectively.\n * Can use `mediaUrlPrefix` in order to use custom checker.\n * This replacement allows the JSS media handler to be used for JSS app assets.\n * Also, any provided `params` are used as the querystring parameters for the media URL.\n * @param {string} url\n * @param {Object} [params]\n * @param {RegExp} [mediaUrlPrefix=mediaUrlPrefixRegex]\n * @returns {string} url\n */\nexports.updateImageUrl = function (url, params, mediaUrlPrefix) {\n    if (mediaUrlPrefix === void 0) { mediaUrlPrefix = mediaUrlPrefixRegex; }\n    // polyfill node `global` in browser to workaround https://github.com/unshiftio/url-parse/issues/150\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof window !== 'undefined' && !window.global) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.global = {};\n    }\n    var parsed = URL(url, {}, true);\n    var query = __assign({}, (params || parsed.query));\n    // In case if imageParams provided\n    if (params) {\n        var requiredParams = exports.getRequiredParams(parsed.query);\n        Object.entries(requiredParams).forEach(function (_a) {\n            var key = _a[0], param = _a[1];\n            if (param) {\n                query[key] = param;\n            }\n        });\n    }\n    parsed.set('query', query);\n    var match = mediaUrlPrefix.exec(parsed.pathname);\n    if (match && match.length > 1) {\n        // regex will provide us with /-/ or /~/ type\n        parsed.set('pathname', parsed.pathname.replace(mediaUrlPrefix, \"/\" + match[1] + \"/jssmedia/\"));\n    }\n    return parsed.toString();\n};\n/**\n * Receives an array of `srcSet` parameters that are iterated and used as parameters to generate\n * a corresponding set of updated Sitecore media URLs via @see updateImageUrl. The result is a comma-delimited\n * list of media URLs with respective dimension parameters.\n *\n * @example\n * // returns '/ipsum.jpg?h=1000&w=1000 1000w, /ipsum.jpg?mh=250&mw=250 250w'\n * getSrcSet('/ipsum.jpg', [{ h: 1000, w: 1000 }, { mh: 250, mw: 250 } ])\n *\n * More information about `srcSet`: {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img}\n *\n * @param {string} url\n * @param {Array} srcSet\n * @param {Object} [imageParams]\n * @param {RegExp} [mediaUrlPrefix]\n * @returns {string} src set\n */\nexports.getSrcSet = function (url, srcSet, imageParams, mediaUrlPrefix) {\n    return srcSet\n        .map(function (params) {\n        var newParams = __assign(__assign({}, imageParams), params);\n        var imageWidth = newParams.w || newParams.mw;\n        if (!imageWidth) {\n            return null;\n        }\n        return exports.updateImageUrl(url, newParams, mediaUrlPrefix) + \" \" + imageWidth + \"w\";\n    })\n        .filter(function (value) { return value; })\n        .join(', ');\n};\n"]},"metadata":{},"sourceType":"script"}