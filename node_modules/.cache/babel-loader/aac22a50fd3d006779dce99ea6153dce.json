{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar data_fetcher_1 = require(\"./data-fetcher\");\n\nvar dataApi_1 = require(\"./dataApi\");\n/**\n * Fetch layout data using the Sitecore Layout Service REST API.\n * Uses Axios as the default data fetcher (@see AxiosDataFetcher).\n */\n\n\nvar RestLayoutService =\n/** @class */\nfunction () {\n  function RestLayoutService(serviceConfig) {\n    var _this = this;\n\n    this.serviceConfig = serviceConfig;\n    /**\n     * Provides fetch options in order to fetch data\n     * @param {string} [language] language will be applied to `sc_lang` param\n     * @returns {FetchOptions} fetch options\n     */\n\n    this.getFetchOptions = function (language) {\n      var _a;\n\n      var params = {\n        sc_apikey: _this.serviceConfig.apiKey,\n        sc_site: _this.serviceConfig.siteName,\n        sc_lang: language || '',\n        tracking: (_a = _this.serviceConfig.tracking, _a !== null && _a !== void 0 ? _a : true)\n      };\n      return {\n        layoutServiceConfig: {\n          host: _this.serviceConfig.apiHost\n        },\n        querystringParams: __assign({}, params)\n      };\n    };\n    /**\n     * Provides default @see AxiosDataFetcher data fetcher\n     * @param {IncomingMessage} [req] Request instance\n     * @param {ServerResponse} [res] Response instance\n     * @returns default fetcher\n     */\n\n\n    this.getDefaultFetcher = function (req, res) {\n      var config = {};\n\n      if (req && res) {\n        config.onReq = _this.setupReqHeaders(req);\n        config.onRes = _this.setupResHeaders(res);\n      }\n\n      var axiosFetcher = new data_fetcher_1.AxiosDataFetcher(config);\n\n      var fetcher = function fetcher(url, data) {\n        return axiosFetcher.fetch(url, data);\n      };\n\n      return fetcher;\n    };\n  }\n  /**\n   * Fetch layout data for an item.\n   * @param {string} itemPath\n   * @param {string} [language]\n   * @param {IncomingMessage} [req] Request instance\n   * @param {ServerResponse} [res] Response instance\n   * @returns {Promise<LayoutServiceData>} layout service data\n   */\n\n\n  RestLayoutService.prototype.fetchLayoutData = function (itemPath, language, req, res) {\n    var fetchOptions = this.getFetchOptions(language);\n    var fetcher = this.serviceConfig.dataFetcherResolver ? this.serviceConfig.dataFetcherResolver(req, res) : this.getDefaultFetcher(req, res);\n    return dataApi_1.fetchRouteData(itemPath, __assign({\n      fetcher: fetcher\n    }, fetchOptions));\n  };\n  /**\n   * Fetch layout data for a particular placeholder.\n   * Makes a request to Sitecore Layout Service for the specified placeholder in\n   * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.\n   * @param {string} placeholderName\n   * @param {string} itemPath\n   * @param {string} [language]\n   * @param {IncomingMessage} [req] Request instance\n   * @param {ServerResponse} [res] Response instance\n   * @returns {Promise<PlaceholderData>} placeholder data\n   */\n\n\n  RestLayoutService.prototype.fetchPlaceholderData = function (placeholderName, itemPath, language, req, res) {\n    var fetchOptions = this.getFetchOptions(language);\n    var fetcher = this.serviceConfig.dataFetcherResolver ? this.serviceConfig.dataFetcherResolver(req, res) : this.getDefaultFetcher(req, res);\n    return dataApi_1.fetchPlaceholderData(placeholderName, itemPath, __assign({\n      fetcher: fetcher\n    }, fetchOptions));\n  };\n  /**\n   * Setup request headers\n   * @param {IncomingMessage} req\n   * @returns {AxiosRequestConfig} axios request config\n   */\n\n\n  RestLayoutService.prototype.setupReqHeaders = function (req) {\n    return function (reqConfig) {\n      reqConfig.headers.common = __assign(__assign(__assign(__assign(__assign({}, reqConfig.headers.common), req.headers.cookie && {\n        cookie: req.headers.cookie\n      }), req.headers.referer && {\n        referer: req.headers.referer\n      }), req.headers['user-agent'] && {\n        'user-agent': req.headers['user-agent']\n      }), req.connection.remoteAddress && {\n        'X-Forwarded-For': req.connection.remoteAddress\n      });\n      return reqConfig;\n    };\n  };\n  /**\n   * Setup response headers based on response from layout service\n   * @param {ServerResponse} res\n   * @returns {AxiosResponse} response\n   */\n\n\n  RestLayoutService.prototype.setupResHeaders = function (res) {\n    return function (serverRes) {\n      serverRes.headers['set-cookie'] && res.setHeader('set-cookie', serverRes.headers['set-cookie']);\n      return serverRes;\n    };\n  };\n\n  return RestLayoutService;\n}();\n\nexports.RestLayoutService = RestLayoutService;","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/node_modules/@sitecore-jss/sitecore-jss/dist/layout-service.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","data_fetcher_1","require","dataApi_1","RestLayoutService","serviceConfig","_this","getFetchOptions","language","_a","params","sc_apikey","apiKey","sc_site","siteName","sc_lang","tracking","layoutServiceConfig","host","apiHost","querystringParams","getDefaultFetcher","req","res","config","onReq","setupReqHeaders","onRes","setupResHeaders","axiosFetcher","AxiosDataFetcher","fetcher","url","data","fetch","fetchLayoutData","itemPath","fetchOptions","dataFetcherResolver","fetchRouteData","fetchPlaceholderData","placeholderName","reqConfig","headers","common","cookie","referer","connection","remoteAddress","serverRes","setHeader"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_fetcher_1 = require(\"./data-fetcher\");\nvar dataApi_1 = require(\"./dataApi\");\n/**\n * Fetch layout data using the Sitecore Layout Service REST API.\n * Uses Axios as the default data fetcher (@see AxiosDataFetcher).\n */\nvar RestLayoutService = /** @class */ (function () {\n    function RestLayoutService(serviceConfig) {\n        var _this = this;\n        this.serviceConfig = serviceConfig;\n        /**\n         * Provides fetch options in order to fetch data\n         * @param {string} [language] language will be applied to `sc_lang` param\n         * @returns {FetchOptions} fetch options\n         */\n        this.getFetchOptions = function (language) {\n            var _a;\n            var params = {\n                sc_apikey: _this.serviceConfig.apiKey,\n                sc_site: _this.serviceConfig.siteName,\n                sc_lang: language || '',\n                tracking: (_a = _this.serviceConfig.tracking, (_a !== null && _a !== void 0 ? _a : true)),\n            };\n            return {\n                layoutServiceConfig: {\n                    host: _this.serviceConfig.apiHost,\n                },\n                querystringParams: __assign({}, params),\n            };\n        };\n        /**\n         * Provides default @see AxiosDataFetcher data fetcher\n         * @param {IncomingMessage} [req] Request instance\n         * @param {ServerResponse} [res] Response instance\n         * @returns default fetcher\n         */\n        this.getDefaultFetcher = function (req, res) {\n            var config = {};\n            if (req && res) {\n                config.onReq = _this.setupReqHeaders(req);\n                config.onRes = _this.setupResHeaders(res);\n            }\n            var axiosFetcher = new data_fetcher_1.AxiosDataFetcher(config);\n            var fetcher = function (url, data) {\n                return axiosFetcher.fetch(url, data);\n            };\n            return fetcher;\n        };\n    }\n    /**\n     * Fetch layout data for an item.\n     * @param {string} itemPath\n     * @param {string} [language]\n     * @param {IncomingMessage} [req] Request instance\n     * @param {ServerResponse} [res] Response instance\n     * @returns {Promise<LayoutServiceData>} layout service data\n     */\n    RestLayoutService.prototype.fetchLayoutData = function (itemPath, language, req, res) {\n        var fetchOptions = this.getFetchOptions(language);\n        var fetcher = this.serviceConfig.dataFetcherResolver\n            ? this.serviceConfig.dataFetcherResolver(req, res)\n            : this.getDefaultFetcher(req, res);\n        return dataApi_1.fetchRouteData(itemPath, __assign({ fetcher: fetcher }, fetchOptions));\n    };\n    /**\n     * Fetch layout data for a particular placeholder.\n     * Makes a request to Sitecore Layout Service for the specified placeholder in\n     * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.\n     * @param {string} placeholderName\n     * @param {string} itemPath\n     * @param {string} [language]\n     * @param {IncomingMessage} [req] Request instance\n     * @param {ServerResponse} [res] Response instance\n     * @returns {Promise<PlaceholderData>} placeholder data\n     */\n    RestLayoutService.prototype.fetchPlaceholderData = function (placeholderName, itemPath, language, req, res) {\n        var fetchOptions = this.getFetchOptions(language);\n        var fetcher = this.serviceConfig.dataFetcherResolver\n            ? this.serviceConfig.dataFetcherResolver(req, res)\n            : this.getDefaultFetcher(req, res);\n        return dataApi_1.fetchPlaceholderData(placeholderName, itemPath, __assign({ fetcher: fetcher }, fetchOptions));\n    };\n    /**\n     * Setup request headers\n     * @param {IncomingMessage} req\n     * @returns {AxiosRequestConfig} axios request config\n     */\n    RestLayoutService.prototype.setupReqHeaders = function (req) {\n        return function (reqConfig) {\n            reqConfig.headers.common = __assign(__assign(__assign(__assign(__assign({}, reqConfig.headers.common), (req.headers.cookie && { cookie: req.headers.cookie })), (req.headers.referer && { referer: req.headers.referer })), (req.headers['user-agent'] && { 'user-agent': req.headers['user-agent'] })), (req.connection.remoteAddress && { 'X-Forwarded-For': req.connection.remoteAddress }));\n            return reqConfig;\n        };\n    };\n    /**\n     * Setup response headers based on response from layout service\n     * @param {ServerResponse} res\n     * @returns {AxiosResponse} response\n     */\n    RestLayoutService.prototype.setupResHeaders = function (res) {\n        return function (serverRes) {\n            serverRes.headers['set-cookie'] &&\n                res.setHeader('set-cookie', serverRes.headers['set-cookie']);\n            return serverRes;\n        };\n    };\n    return RestLayoutService;\n}());\nexports.RestLayoutService = RestLayoutService;\n"]},"metadata":{},"sourceType":"script"}