{"ast":null,"code":"import { ApolloLink, Observable } from 'apollo-link';\n\nvar sha256 = require('hash.js/lib/hash/sha/256');\n\nimport { print } from 'graphql/language/printer';\nexport var VERSION = 1;\nexport var defaultGenerateHash = function defaultGenerateHash(query) {\n  return sha256().update(print(query)).digest('hex');\n};\nexport var defaultOptions = {\n  generateHash: defaultGenerateHash,\n  disable: function disable(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        operation = _a.operation;\n\n    if (graphQLErrors && graphQLErrors.some(function (_a) {\n      var message = _a.message;\n      return message === 'PersistedQueryNotSupported';\n    })) {\n      return true;\n    }\n\n    var response = operation.getContext().response;\n\n    if (response && response.status && (response.status === 400 || response.status === 500)) {\n      return true;\n    }\n\n    return false;\n  },\n  useGETForHashedQueries: false\n};\n\nfunction definitionIsMutation(d) {\n  return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n}\n\nfunction operationIsQuery(operation) {\n  return !operation.query.definitions.some(definitionIsMutation);\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hashesKeyString = '__createPersistedQueryLink_hashes';\nvar hashesKey = typeof Symbol === 'function' ? Symbol.for(hashesKeyString) : hashesKeyString;\nvar nextHashesChildKey = 0;\nexport var createPersistedQueryLink = function createPersistedQueryLink(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = Object.assign({}, defaultOptions, options),\n      generateHash = _a.generateHash,\n      disable = _a.disable,\n      useGETForHashedQueries = _a.useGETForHashedQueries;\n\n  var supportsPersistedQueries = true;\n  var hashesChildKey = 'forLink' + nextHashesChildKey++;\n\n  function getQueryHash(query) {\n    if (!query || typeof query !== \"object\") {\n      return generateHash(query);\n    }\n\n    if (!hasOwnProperty.call(query, hashesKey)) {\n      Object.defineProperty(query, hashesKey, {\n        value: Object.create(null),\n        enumerable: false\n      });\n    }\n\n    var hashes = query[hashesKey];\n    return hasOwnProperty.call(hashes, hashesChildKey) ? hashes[hashesChildKey] : hashes[hashesChildKey] = generateHash(query);\n  }\n\n  return new ApolloLink(function (operation, forward) {\n    if (!forward) {\n      throw new Error('PersistedQueryLink cannot be the last link in the chain.');\n    }\n\n    var query = operation.query;\n    var hashError;\n\n    if (supportsPersistedQueries) {\n      try {\n        operation.extensions.persistedQuery = {\n          version: VERSION,\n          sha256Hash: getQueryHash(query)\n        };\n      } catch (e) {\n        hashError = e;\n      }\n    }\n\n    return new Observable(function (observer) {\n      if (hashError) {\n        observer.error(hashError);\n        return;\n      }\n\n      var subscription;\n      var retried = false;\n      var originalFetchOptions;\n      var setFetchOptions = false;\n\n      var retry = function retry(_a, cb) {\n        var response = _a.response,\n            networkError = _a.networkError;\n\n        if (!retried && (response && response.errors || networkError)) {\n          retried = true;\n          var disablePayload = {\n            response: response,\n            networkError: networkError,\n            operation: operation,\n            graphQLErrors: response ? response.errors : undefined\n          };\n          supportsPersistedQueries = !disable(disablePayload);\n\n          if (response && response.errors && response.errors.some(function (_a) {\n            var message = _a.message;\n            return message === 'PersistedQueryNotFound';\n          }) || !supportsPersistedQueries) {\n            if (subscription) subscription.unsubscribe();\n            operation.setContext({\n              http: {\n                includeQuery: true,\n                includeExtensions: supportsPersistedQueries\n              }\n            });\n\n            if (setFetchOptions) {\n              operation.setContext({\n                fetchOptions: originalFetchOptions\n              });\n            }\n\n            subscription = forward(operation).subscribe(handler);\n            return;\n          }\n        }\n\n        cb();\n      };\n\n      var handler = {\n        next: function next(response) {\n          retry({\n            response: response\n          }, function () {\n            return observer.next(response);\n          });\n        },\n        error: function error(networkError) {\n          retry({\n            networkError: networkError\n          }, function () {\n            return observer.error(networkError);\n          });\n        },\n        complete: observer.complete.bind(observer)\n      };\n      operation.setContext({\n        http: {\n          includeQuery: !supportsPersistedQueries,\n          includeExtensions: supportsPersistedQueries\n        }\n      });\n\n      if (useGETForHashedQueries && supportsPersistedQueries && operationIsQuery(operation)) {\n        operation.setContext(function (_a) {\n          var _b = _a.fetchOptions,\n              fetchOptions = _b === void 0 ? {} : _b;\n          originalFetchOptions = fetchOptions;\n          return {\n            fetchOptions: Object.assign({}, fetchOptions, {\n              method: 'GET'\n            })\n          };\n        });\n        setFetchOptions = true;\n      }\n\n      subscription = forward(operation).subscribe(handler);\n      return function () {\n        if (subscription) subscription.unsubscribe();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,UAArB,QAAkD,aAAlD;;AACA,IAAM,MAAM,GAAG,OAAO,CAAC,0BAAD,CAAtB;;AACA,SAAS,KAAT,QAAsB,0BAAtB;AAQA,OAAO,IAAM,OAAO,GAAG,CAAhB;AAiBP,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,KAAD,EAAoB;AACrD,SAAA,MAAM,GACH,MADH,CACU,KAAK,CAAC,KAAD,CADf,EAEG,MAFH,CAEU,KAFV,CAAA;AAEgB,CAHX;AAKP,OAAO,IAAM,cAAc,GAAG;AAC5B,EAAA,YAAY,EAAE,mBADc;AAE5B,EAAA,OAAO,EAAE,iBAAC,EAAD,EAA4C;QAAzC,aAAA,GAAA,EAAA,CAAA,a;QAAe,SAAA,GAAA,EAAA,CAAA,S;;AAEzB,QACE,aAAa,IACb,aAAa,CAAC,IAAd,CACE,UAAC,EAAD,EAAY;UAAT,OAAA,GAAA,EAAA,CAAA,O;AAAc,aAAA,OAAO,KAAK,4BAAZ;AAAwC,KAD3D,CAFF,EAKE;AACA,aAAO,IAAP;AACD;;AAEO,QAAA,QAAA,GAAA,SAAA,CAAA,UAAA,GAAA,QAAA;;AAGR,QACE,QAAQ,IACR,QAAQ,CAAC,MADT,KAEC,QAAQ,CAAC,MAAT,KAAoB,GAApB,IAA2B,QAAQ,CAAC,MAAT,KAAoB,GAFhD,CADF,EAIE;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAzB2B;AA0B5B,EAAA,sBAAsB,EAAE;AA1BI,CAAvB;;AA6BP,SAAA,oBAAA,CAA8B,CAA9B,EAA+C;AAC7C,SAAO,CAAC,CAAC,IAAF,KAAW,qBAAX,IAAoC,CAAC,CAAC,SAAF,KAAgB,UAA3D;AACD;;AAGD,SAAA,gBAAA,CAA0B,SAA1B,EAA8C;AAC5C,SAAO,CAAC,SAAS,CAAC,KAAV,CAAgB,WAAhB,CAA4B,IAA5B,CAAiC,oBAAjC,CAAR;AACD;;AAEO,IAAA,cAAA,GAAA,MAAA,CAAA,SAAA,CAAA,cAAA;AACR,IAAM,eAAe,GAAG,mCAAxB;AACA,IAAM,SAAS,GAAG,OAAO,MAAP,KAAkB,UAAlB,GACd,MAAM,CAAC,GAAP,CAAW,eAAX,CADc,GAEd,eAFJ;AAGA,IAAI,kBAAkB,GAAG,CAAzB;AAEA,OAAO,IAAM,wBAAwB,GAAG,SAA3B,wBAA2B,CACtC,OADsC,EACE;AAAxC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAwC;;AAElC,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,cAAA,EAAA,OAAA,CAAA;AAAA,MAAE,YAAA,GAAA,EAAA,CAAA,YAAF;AAAA,MAAgB,OAAA,GAAA,EAAA,CAAA,OAAhB;AAAA,MAAyB,sBAAA,GAAA,EAAA,CAAA,sBAAzB;;AAKN,MAAI,wBAAwB,GAAG,IAA/B;AAEA,MAAM,cAAc,GAAG,YAAY,kBAAkB,EAArD;;AACA,WAAA,YAAA,CAAsB,KAAtB,EAAyC;AACvC,QAAI,CAAC,KAAD,IAAU,OAAO,KAAP,KAAiB,QAA/B,EAAyC;AAIvC,aAAO,YAAY,CAAC,KAAD,CAAnB;AACD;;AACD,QAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,KAApB,EAA2B,SAA3B,CAAL,EAA4C;AAC1C,MAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,SAA7B,EAAwC;AACtC,QAAA,KAAK,EAAE,MAAM,CAAC,MAAP,CAAc,IAAd,CAD+B;AAEtC,QAAA,UAAU,EAAE;AAF0B,OAAxC;AAID;;AACD,QAAM,MAAM,GAAI,KAAa,CAAC,SAAD,CAA7B;AACA,WAAO,cAAc,CAAC,IAAf,CAAoB,MAApB,EAA4B,cAA5B,IACH,MAAM,CAAC,cAAD,CADH,GAEH,MAAM,CAAC,cAAD,CAAN,GAAyB,YAAY,CAAC,KAAD,CAFzC;AAGD;;AAED,SAAO,IAAI,UAAJ,CAAe,UAAC,SAAD,EAAY,OAAZ,EAAmB;AACvC,QAAI,CAAC,OAAL,EAAc;AACZ,YAAM,IAAI,KAAJ,CACJ,0DADI,CAAN;AAGD;;AAEO,QAAA,KAAA,GAAA,SAAA,CAAA,KAAA;AAER,QAAI,SAAJ;;AACA,QAAI,wBAAJ,EAA8B;AAC5B,UAAI;AACF,QAAA,SAAS,CAAC,UAAV,CAAqB,cAArB,GAAsC;AACpC,UAAA,OAAO,EAAE,OAD2B;AAEpC,UAAA,UAAU,EAAE,YAAY,CAAC,KAAD;AAFY,SAAtC;AAID,OALD,CAKE,OAAO,CAAP,EAAU;AACV,QAAA,SAAS,GAAG,CAAZ;AACD;AACF;;AAED,WAAO,IAAI,UAAJ,CAAe,UAAA,QAAA,EAAQ;AAC5B,UAAI,SAAJ,EAAe;AACb,QAAA,QAAQ,CAAC,KAAT,CAAe,SAAf;AACA;AACD;;AAED,UAAI,YAAJ;AACA,UAAI,OAAO,GAAG,KAAd;AACA,UAAI,oBAAJ;AACA,UAAI,eAAe,GAAG,KAAtB;;AACA,UAAM,KAAK,GAAG,SAAR,KAAQ,CACZ,EADY,EAKZ,EALY,EAKE;YAHZ,QAAA,GAAA,EAAA,CAAA,Q;YACA,YAAA,GAAA,EAAA,CAAA,Y;;AAIF,YAAI,CAAC,OAAD,KAAc,QAAQ,IAAI,QAAQ,CAAC,MAAtB,IAAiC,YAA9C,CAAJ,EAAiE;AAC/D,UAAA,OAAO,GAAG,IAAV;AAEA,cAAM,cAAc,GAAG;AACrB,YAAA,QAAQ,EAAA,QADa;AAErB,YAAA,YAAY,EAAA,YAFS;AAGrB,YAAA,SAAS,EAAA,SAHY;AAIrB,YAAA,aAAa,EAAE,QAAQ,GAAG,QAAQ,CAAC,MAAZ,GAAqB;AAJvB,WAAvB;AAOA,UAAA,wBAAwB,GAAG,CAAC,OAAO,CAAC,cAAD,CAAnC;;AAGA,cACG,QAAQ,IACP,QAAQ,CAAC,MADV,IAEC,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CACE,UAAC,EAAD,EAAY;gBAAT,OAAA,GAAA,EAAA,CAAA,O;AAAc,mBAAA,OAAO,KAAK,wBAAZ;AAAoC,WADvD,CAFF,IAKA,CAAC,wBANH,EAOE;AAEA,gBAAI,YAAJ,EAAkB,YAAY,CAAC,WAAb;AAElB,YAAA,SAAS,CAAC,UAAV,CAAqB;AACnB,cAAA,IAAI,EAAE;AACJ,gBAAA,YAAY,EAAE,IADV;AAEJ,gBAAA,iBAAiB,EAAE;AAFf;AADa,aAArB;;AAMA,gBAAI,eAAJ,EAAqB;AACnB,cAAA,SAAS,CAAC,UAAV,CAAqB;AAAE,gBAAA,YAAY,EAAE;AAAhB,eAArB;AACD;;AACD,YAAA,YAAY,GAAG,OAAO,CAAC,SAAD,CAAP,CAAmB,SAAnB,CAA6B,OAA7B,CAAf;AAEA;AACD;AACF;;AACD,QAAA,EAAE;AACH,OA9CD;;AA+CA,UAAM,OAAO,GAAG;AACd,QAAA,IAAI,EAAE,cAAC,QAAD,EAA0B;AAC9B,UAAA,KAAK,CAAC;AAAE,YAAA,QAAQ,EAAA;AAAV,WAAD,EAAe,YAAA;AAAM,mBAAA,QAAQ,CAAC,IAAT,CAAA,QAAA,CAAA;AAAuB,WAA5C,CAAL;AACD,SAHa;AAId,QAAA,KAAK,EAAE,eAAC,YAAD,EAAoB;AACzB,UAAA,KAAK,CAAC;AAAE,YAAA,YAAY,EAAA;AAAd,WAAD,EAAmB,YAAA;AAAM,mBAAA,QAAQ,CAAC,KAAT,CAAA,YAAA,CAAA;AAA4B,WAArD,CAAL;AACD,SANa;AAOd,QAAA,QAAQ,EAAE,QAAQ,CAAC,QAAT,CAAkB,IAAlB,CAAuB,QAAvB;AAPI,OAAhB;AAWA,MAAA,SAAS,CAAC,UAAV,CAAqB;AACnB,QAAA,IAAI,EAAE;AACJ,UAAA,YAAY,EAAE,CAAC,wBADX;AAEJ,UAAA,iBAAiB,EAAE;AAFf;AADa,OAArB;;AAUA,UACE,sBAAsB,IACtB,wBADA,IAEA,gBAAgB,CAAC,SAAD,CAHlB,EAIE;AACA,QAAA,SAAS,CAAC,UAAV,CAAqB,UAAC,EAAD,EAAsB;cAAnB,EAAA,GAAA,EAAA,CAAA,Y;cAAA,YAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;AACtB,UAAA,oBAAoB,GAAG,YAAvB;AACA,iBAAO;AACL,YAAA,YAAY,EAAE,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,YAAlB,EAAgC;AAAE,cAAA,MAAM,EAAE;AAAV,aAAhC;AADT,WAAP;AAGD,SALD;AAMA,QAAA,eAAe,GAAG,IAAlB;AACD;;AAED,MAAA,YAAY,GAAG,OAAO,CAAC,SAAD,CAAP,CAAmB,SAAnB,CAA6B,OAA7B,CAAf;AAEA,aAAO,YAAA;AACL,YAAI,YAAJ,EAAkB,YAAY,CAAC,WAAb;AACnB,OAFD;AAGD,KAjGM,CAAP;AAkGD,GAvHM,CAAP;AAwHD,CAtJM","sourceRoot":"","sourcesContent":["import { ApolloLink, Observable } from 'apollo-link';\nvar sha256 = require('hash.js/lib/hash/sha/256');\nimport { print } from 'graphql/language/printer';\nexport var VERSION = 1;\nexport var defaultGenerateHash = function (query) {\n    return sha256()\n        .update(print(query))\n        .digest('hex');\n};\nexport var defaultOptions = {\n    generateHash: defaultGenerateHash,\n    disable: function (_a) {\n        var graphQLErrors = _a.graphQLErrors, operation = _a.operation;\n        if (graphQLErrors &&\n            graphQLErrors.some(function (_a) {\n                var message = _a.message;\n                return message === 'PersistedQueryNotSupported';\n            })) {\n            return true;\n        }\n        var response = operation.getContext().response;\n        if (response &&\n            response.status &&\n            (response.status === 400 || response.status === 500)) {\n            return true;\n        }\n        return false;\n    },\n    useGETForHashedQueries: false,\n};\nfunction definitionIsMutation(d) {\n    return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n}\nfunction operationIsQuery(operation) {\n    return !operation.query.definitions.some(definitionIsMutation);\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hashesKeyString = '__createPersistedQueryLink_hashes';\nvar hashesKey = typeof Symbol === 'function'\n    ? Symbol.for(hashesKeyString)\n    : hashesKeyString;\nvar nextHashesChildKey = 0;\nexport var createPersistedQueryLink = function (options) {\n    if (options === void 0) { options = {}; }\n    var _a = Object.assign({}, defaultOptions, options), generateHash = _a.generateHash, disable = _a.disable, useGETForHashedQueries = _a.useGETForHashedQueries;\n    var supportsPersistedQueries = true;\n    var hashesChildKey = 'forLink' + nextHashesChildKey++;\n    function getQueryHash(query) {\n        if (!query || typeof query !== \"object\") {\n            return generateHash(query);\n        }\n        if (!hasOwnProperty.call(query, hashesKey)) {\n            Object.defineProperty(query, hashesKey, {\n                value: Object.create(null),\n                enumerable: false,\n            });\n        }\n        var hashes = query[hashesKey];\n        return hasOwnProperty.call(hashes, hashesChildKey)\n            ? hashes[hashesChildKey]\n            : hashes[hashesChildKey] = generateHash(query);\n    }\n    return new ApolloLink(function (operation, forward) {\n        if (!forward) {\n            throw new Error('PersistedQueryLink cannot be the last link in the chain.');\n        }\n        var query = operation.query;\n        var hashError;\n        if (supportsPersistedQueries) {\n            try {\n                operation.extensions.persistedQuery = {\n                    version: VERSION,\n                    sha256Hash: getQueryHash(query),\n                };\n            }\n            catch (e) {\n                hashError = e;\n            }\n        }\n        return new Observable(function (observer) {\n            if (hashError) {\n                observer.error(hashError);\n                return;\n            }\n            var subscription;\n            var retried = false;\n            var originalFetchOptions;\n            var setFetchOptions = false;\n            var retry = function (_a, cb) {\n                var response = _a.response, networkError = _a.networkError;\n                if (!retried && ((response && response.errors) || networkError)) {\n                    retried = true;\n                    var disablePayload = {\n                        response: response,\n                        networkError: networkError,\n                        operation: operation,\n                        graphQLErrors: response ? response.errors : undefined,\n                    };\n                    supportsPersistedQueries = !disable(disablePayload);\n                    if ((response &&\n                        response.errors &&\n                        response.errors.some(function (_a) {\n                            var message = _a.message;\n                            return message === 'PersistedQueryNotFound';\n                        })) ||\n                        !supportsPersistedQueries) {\n                        if (subscription)\n                            subscription.unsubscribe();\n                        operation.setContext({\n                            http: {\n                                includeQuery: true,\n                                includeExtensions: supportsPersistedQueries,\n                            },\n                        });\n                        if (setFetchOptions) {\n                            operation.setContext({ fetchOptions: originalFetchOptions });\n                        }\n                        subscription = forward(operation).subscribe(handler);\n                        return;\n                    }\n                }\n                cb();\n            };\n            var handler = {\n                next: function (response) {\n                    retry({ response: response }, function () { return observer.next(response); });\n                },\n                error: function (networkError) {\n                    retry({ networkError: networkError }, function () { return observer.error(networkError); });\n                },\n                complete: observer.complete.bind(observer),\n            };\n            operation.setContext({\n                http: {\n                    includeQuery: !supportsPersistedQueries,\n                    includeExtensions: supportsPersistedQueries,\n                },\n            });\n            if (useGETForHashedQueries &&\n                supportsPersistedQueries &&\n                operationIsQuery(operation)) {\n                operation.setContext(function (_a) {\n                    var _b = _a.fetchOptions, fetchOptions = _b === void 0 ? {} : _b;\n                    originalFetchOptions = fetchOptions;\n                    return {\n                        fetchOptions: Object.assign({}, fetchOptions, { method: 'GET' }),\n                    };\n                });\n                setFetchOptions = true;\n            }\n            subscription = forward(operation).subscribe(handler);\n            return function () {\n                if (subscription)\n                    subscription.unsubscribe();\n            };\n        });\n    });\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}