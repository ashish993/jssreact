{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar AxiosDataFetcher =\n/** @class */\nfunction () {\n  /**\n   * @param {AxiosDataFetcherConfig} dataFetcherConfig Axios data fetcher configuration.\n   * Note `withCredentials` is set to `true` by default in order for Sitecore cookies to\n   * be included in CORS requests (which is necessary for analytics and such).\n   */\n  function AxiosDataFetcher(dataFetcherConfig) {\n    if (dataFetcherConfig === void 0) {\n      dataFetcherConfig = {};\n    }\n\n    var onReq = dataFetcherConfig.onReq,\n        onRes = dataFetcherConfig.onRes,\n        onReqError = dataFetcherConfig.onReqError,\n        onResError = dataFetcherConfig.onResError,\n        axiosConfig = __rest(dataFetcherConfig, [\"onReq\", \"onRes\", \"onReqError\", \"onResError\"]);\n\n    if (axiosConfig.withCredentials === undefined) {\n      axiosConfig.withCredentials = true;\n    }\n\n    this.instance = axios_1.default.create(axiosConfig);\n\n    if (onReq) {\n      this.instance.interceptors.request.use(onReq, onReqError);\n    }\n\n    if (onRes) {\n      this.instance.interceptors.response.use(onRes, onResError);\n    }\n  }\n  /**\n   * Implements a data fetcher. @see HttpJsonFetcher<T> type for implementation details/notes.\n   * @param {string} url The URL to request; may include query string\n   * @param {any} [data] Optional data to POST with the request.\n   * @returns {Promise<AxiosResponse<T>>} response\n   */\n\n\n  AxiosDataFetcher.prototype.fetch = function (url, data) {\n    return this.instance.request({\n      url: url,\n      method: data ? 'POST' : 'GET',\n      data: data\n    });\n  };\n  /**\n   * Perform a GET request\n   * @param {string} url The URL to request; may include query string\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse<T>>} response\n   */\n\n\n  AxiosDataFetcher.prototype.get = function (url, config) {\n    return this.instance.get(url, config);\n  };\n  /**\n   * Perform a HEAD request\n   * @param {string} url The URL to request; may include query string\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n\n\n  AxiosDataFetcher.prototype.head = function (url, config) {\n    return this.instance.head(url, config);\n  };\n  /**\n   * Perform a POST request\n   * @param {string} url The URL to request; may include query string\n   * @param {any} [data] Data to POST with the request.\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n\n\n  AxiosDataFetcher.prototype.post = function (url, data, config) {\n    return this.instance.post(url, data, config);\n  };\n  /**\n   * Perform a PUT request\n   * @param {string} url The URL to request; may include query string\n   * @param {any} [data] Data to PUT with the request.\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n\n\n  AxiosDataFetcher.prototype.put = function (url, data, config) {\n    return this.instance.put(url, data, config);\n  };\n  /**\n   * Perform a DELETE request\n   * @param {string} url The URL to request; may include query string\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n\n\n  AxiosDataFetcher.prototype.delete = function (url, config) {\n    return this.instance.delete(url, config);\n  };\n\n  return AxiosDataFetcher;\n}();\n\nexports.AxiosDataFetcher = AxiosDataFetcher;","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/node_modules/@sitecore-jss/sitecore-jss/dist/data-fetcher.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","value","axios_1","require","AxiosDataFetcher","dataFetcherConfig","onReq","onRes","onReqError","onResError","axiosConfig","withCredentials","undefined","instance","default","create","interceptors","request","use","response","fetch","url","data","method","get","config","head","post","put","delete"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar axios_1 = __importDefault(require(\"axios\"));\nvar AxiosDataFetcher = /** @class */ (function () {\n    /**\n     * @param {AxiosDataFetcherConfig} dataFetcherConfig Axios data fetcher configuration.\n     * Note `withCredentials` is set to `true` by default in order for Sitecore cookies to\n     * be included in CORS requests (which is necessary for analytics and such).\n     */\n    function AxiosDataFetcher(dataFetcherConfig) {\n        if (dataFetcherConfig === void 0) { dataFetcherConfig = {}; }\n        var onReq = dataFetcherConfig.onReq, onRes = dataFetcherConfig.onRes, onReqError = dataFetcherConfig.onReqError, onResError = dataFetcherConfig.onResError, axiosConfig = __rest(dataFetcherConfig, [\"onReq\", \"onRes\", \"onReqError\", \"onResError\"]);\n        if (axiosConfig.withCredentials === undefined) {\n            axiosConfig.withCredentials = true;\n        }\n        this.instance = axios_1.default.create(axiosConfig);\n        if (onReq) {\n            this.instance.interceptors.request.use(onReq, onReqError);\n        }\n        if (onRes) {\n            this.instance.interceptors.response.use(onRes, onResError);\n        }\n    }\n    /**\n     * Implements a data fetcher. @see HttpJsonFetcher<T> type for implementation details/notes.\n     * @param {string} url The URL to request; may include query string\n     * @param {any} [data] Optional data to POST with the request.\n     * @returns {Promise<AxiosResponse<T>>} response\n     */\n    AxiosDataFetcher.prototype.fetch = function (url, data) {\n        return this.instance.request({\n            url: url,\n            method: data ? 'POST' : 'GET',\n            data: data,\n        });\n    };\n    /**\n     * Perform a GET request\n     * @param {string} url The URL to request; may include query string\n     * @param {AxiosRequestConfig} [config] Axios config\n     * @returns {Promise<AxiosResponse<T>>} response\n     */\n    AxiosDataFetcher.prototype.get = function (url, config) {\n        return this.instance.get(url, config);\n    };\n    /**\n     * Perform a HEAD request\n     * @param {string} url The URL to request; may include query string\n     * @param {AxiosRequestConfig} [config] Axios config\n     * @returns {Promise<AxiosResponse>} response\n     */\n    AxiosDataFetcher.prototype.head = function (url, config) {\n        return this.instance.head(url, config);\n    };\n    /**\n     * Perform a POST request\n     * @param {string} url The URL to request; may include query string\n     * @param {any} [data] Data to POST with the request.\n     * @param {AxiosRequestConfig} [config] Axios config\n     * @returns {Promise<AxiosResponse>} response\n     */\n    AxiosDataFetcher.prototype.post = function (url, data, config) {\n        return this.instance.post(url, data, config);\n    };\n    /**\n     * Perform a PUT request\n     * @param {string} url The URL to request; may include query string\n     * @param {any} [data] Data to PUT with the request.\n     * @param {AxiosRequestConfig} [config] Axios config\n     * @returns {Promise<AxiosResponse>} response\n     */\n    AxiosDataFetcher.prototype.put = function (url, data, config) {\n        return this.instance.put(url, data, config);\n    };\n    /**\n     * Perform a DELETE request\n     * @param {string} url The URL to request; may include query string\n     * @param {AxiosRequestConfig} [config] Axios config\n     * @returns {Promise<AxiosResponse>} response\n     */\n    AxiosDataFetcher.prototype.delete = function (url, config) {\n        return this.instance.delete(url, config);\n    };\n    return AxiosDataFetcher;\n}());\nexports.AxiosDataFetcher = AxiosDataFetcher;\n"]},"metadata":{},"sourceType":"script"}