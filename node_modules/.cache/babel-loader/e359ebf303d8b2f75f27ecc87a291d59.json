{"ast":null,"code":"/* eslint-disable import/first */\nimport 'cross-fetch/polyfill';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\n/* eslint-disable import/order */\n\n/*\r\n  INTROSPECTION DATA\r\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\r\n  This enables the Apollo cache to process fragments on interface types correctly.\r\n  If this file does not exist, you may need to run the `jss graphql:update` script.\r\n*/\n\nimport introspectionQueryResultData from '../temp/GraphQLFragmentTypes.json';\n/*\r\n  QUERY LINK SELECTION\r\n  A link is transport which GraphQL queries are pushed across.\r\n  You have many choices.\r\n  See the apollo-link documentation for more details.\r\n\r\n  NOTE: to use Sitecore Experience Editor it is essential that your\r\n  link passes cookies along with requests (credentials: 'include').\r\n*/\n// choose between a basic HTTP link to run queries...\n// import { createHttpLink } from 'apollo-link-http';\n// const link = createHttpLink({ uri: endpoint, credentials: 'include' });\n// ...or a batched link (multiple queries within 10ms all go in one HTTP request)\n\nimport { BatchHttpLink } from 'apollo-link-batch-http'; // ...and an automatic persisted query link, which reduces bandwidth by using query hashes to alias content\n// the APQ link is _chained_ behind another link that performs the actual HTTP calls, so you can choose\n// APQ + batched, or APQ + http links for example.\n\nimport { createPersistedQueryLink } from 'apollo-link-persisted-queries';\nexport default function (endpoint, ssr, initialCacheState) {\n  /* HTTP link selection: default to batched + APQ */\n  var link = createPersistedQueryLink().concat(new BatchHttpLink({\n    uri: endpoint,\n    credentials: 'include',\n    headers: {\n      connection: 'keep-alive'\n    }\n  }));\n  var cache = new InMemoryCache({\n    fragmentMatcher: new IntrospectionFragmentMatcher({\n      introspectionQueryResultData\n    })\n  });\n  return new ApolloClient({\n    ssrMode: ssr,\n    ssrForceFetchDelay: 100,\n    link,\n    cache: cache.restore(initialCacheState)\n  });\n}","map":{"version":3,"sources":["C:/Users/asha/Documents/ASHA/sitecorejss/test/my-react-jss-app/src/lib/GraphQLClientFactory.js"],"names":["ApolloClient","InMemoryCache","IntrospectionFragmentMatcher","introspectionQueryResultData","BatchHttpLink","createPersistedQueryLink","endpoint","ssr","initialCacheState","link","concat","uri","credentials","headers","connection","cache","fragmentMatcher","ssrMode","ssrForceFetchDelay","restore"],"mappings":"AAAA;AAEA,OAAO,sBAAP;AACA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,EAAwBC,4BAAxB,QAA4D,uBAA5D;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,4BAAP,MAAyC,mCAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,SAASC,aAAT,QAA8B,wBAA9B,C,CAEA;AACA;AACA;;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AAEA,eAAe,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,iBAAzB,EAA4C;AACzD;AACA,MAAMC,IAAI,GAAGJ,wBAAwB,GAAGK,MAA3B,CACX,IAAIN,aAAJ,CAAkB;AAChBO,IAAAA,GAAG,EAAEL,QADW;AAEhBM,IAAAA,WAAW,EAAE,SAFG;AAGhBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE;AADL;AAHO,GAAlB,CADW,CAAb;AAUA,MAAMC,KAAK,GAAG,IAAId,aAAJ,CAAkB;AAC9Be,IAAAA,eAAe,EAAE,IAAId,4BAAJ,CAAiC;AAChDC,MAAAA;AADgD,KAAjC;AADa,GAAlB,CAAd;AAMA,SAAO,IAAIH,YAAJ,CAAiB;AACtBiB,IAAAA,OAAO,EAAEV,GADa;AAEtBW,IAAAA,kBAAkB,EAAE,GAFE;AAGtBT,IAAAA,IAHsB;AAItBM,IAAAA,KAAK,EAAEA,KAAK,CAACI,OAAN,CAAcX,iBAAd;AAJe,GAAjB,CAAP;AAMD","sourcesContent":["/* eslint-disable import/first */\r\n\r\nimport 'cross-fetch/polyfill';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\r\n\r\n/* eslint-disable import/order */\r\n\r\n/*\r\n  INTROSPECTION DATA\r\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\r\n  This enables the Apollo cache to process fragments on interface types correctly.\r\n  If this file does not exist, you may need to run the `jss graphql:update` script.\r\n*/\r\nimport introspectionQueryResultData from '../temp/GraphQLFragmentTypes.json';\r\n\r\n/*\r\n  QUERY LINK SELECTION\r\n  A link is transport which GraphQL queries are pushed across.\r\n  You have many choices.\r\n  See the apollo-link documentation for more details.\r\n\r\n  NOTE: to use Sitecore Experience Editor it is essential that your\r\n  link passes cookies along with requests (credentials: 'include').\r\n*/\r\n\r\n// choose between a basic HTTP link to run queries...\r\n// import { createHttpLink } from 'apollo-link-http';\r\n// const link = createHttpLink({ uri: endpoint, credentials: 'include' });\r\n\r\n// ...or a batched link (multiple queries within 10ms all go in one HTTP request)\r\nimport { BatchHttpLink } from 'apollo-link-batch-http';\r\n\r\n// ...and an automatic persisted query link, which reduces bandwidth by using query hashes to alias content\r\n// the APQ link is _chained_ behind another link that performs the actual HTTP calls, so you can choose\r\n// APQ + batched, or APQ + http links for example.\r\nimport { createPersistedQueryLink } from 'apollo-link-persisted-queries';\r\n\r\nexport default function (endpoint, ssr, initialCacheState) {\r\n  /* HTTP link selection: default to batched + APQ */\r\n  const link = createPersistedQueryLink().concat(\r\n    new BatchHttpLink({\r\n      uri: endpoint,\r\n      credentials: 'include',\r\n      headers: {\r\n        connection: 'keep-alive',\r\n      },\r\n    })\r\n  );\r\n\r\n  const cache = new InMemoryCache({\r\n    fragmentMatcher: new IntrospectionFragmentMatcher({\r\n      introspectionQueryResultData,\r\n    }),\r\n  });\r\n\r\n  return new ApolloClient({\r\n    ssrMode: ssr,\r\n    ssrForceFetchDelay: 100,\r\n    link,\r\n    cache: cache.restore(initialCacheState),\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}