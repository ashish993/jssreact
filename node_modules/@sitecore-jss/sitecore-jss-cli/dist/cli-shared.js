"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var yargs_1 = __importDefault(require("yargs"));
// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', function (err) {
    throw err;
});
/**
 * @param {any} commands
 */
function cli(commands) {
    var appCommands = yargs_1.default.usage('$0 <command>');
    // this prevents yargs from showing help with 'jss.js' as the base command
    // when the command is just 'jss' as a global bin
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    appCommands.$0 = 'jss';
    var _loop_1 = function (cmd) {
        var commandObject = commands[cmd];
        // command is a yargs builder function that takes a yargs and returns a yargs
        // YARRRRRGS :D
        if (typeof commandObject.builder === 'function') {
            appCommands = commandObject.builder(appCommands);
        }
        // command is a yargs 'command module' (https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module)
        if (typeof commandObject.builder === 'object') {
            var ogBuilder_1 = commandObject.builder;
            // apply strict-ness to the args of each command
            var builderFunc = commandObject.disableStrictArgs
                ? function (yarrrrg) { return yarrrrg.options(ogBuilder_1); }
                : function (yarrrrg) { return yarrrrg.options(ogBuilder_1).strict(); };
            commandObject.builder = builderFunc;
            appCommands = appCommands.command(commandObject);
        }
    };
    for (var _i = 0, _a = Object.keys(commands); _i < _a.length; _i++) {
        var cmd = _a[_i];
        _loop_1(cmd);
    }
    var argv = appCommands.demandCommand(1).help().argv;
    if (!argv._[0]) {
        console.log('Missing command. Use --help to see all available options.');
    }
}
exports.default = cli;
