"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubSource = void 0;
var chalk_1 = __importDefault(require("chalk"));
var fs_1 = __importDefault(require("fs"));
var jszip_1 = __importDefault(require("jszip"));
var path_1 = __importDefault(require("path"));
var axios_1 = __importDefault(require("axios"));
var tmp_1 = __importDefault(require("tmp"));
var GitHubSource = /** @class */ (function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function GitHubSource(argv, destinationPath) {
        var repository = argv.repository || 'Sitecore/jss';
        var branch = argv.branch || 'master';
        this.branch = branch;
        this.githubListApi = "https://api.github.com/repos/" + repository + "/contents/samples?ref=" + branch;
        this.githubDownloadUrl = "https://github.com/" + repository + "/archive/" + branch + ".zip";
        this.argv = argv;
        this.destinationPath = destinationPath;
    }
    GitHubSource.prototype.getFromSource = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.verifyTemplate()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                tmp_1.default.setGracefulCleanup();
                                // unsafeCleanup just means it'll kill any files left in the temp folder
                                // that we've created.
                                tmp_1.default.dir({ unsafeCleanup: true }, function (err, tempDir, cleanupTempDir) { return __awaiter(_this, void 0, void 0, function () {
                                    var zipFileName;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (err) {
                                                    reject(err);
                                                }
                                                zipFileName = path_1.default.join(tempDir, 'jss.zip');
                                                return [4 /*yield*/, this.downloadRepo(zipFileName)];
                                            case 1:
                                                _a.sent();
                                                return [4 /*yield*/, this.extractTemplateFiles(zipFileName)];
                                            case 2:
                                                _a.sent();
                                                cleanupTempDir();
                                                resolve();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                }
            });
        });
    };
    GitHubSource.prototype.verifyTemplate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        axios_1.default
                            .get(_this.githubListApi, {
                            headers: { 'User-Agent': 'SitecoreJSSCLI' },
                            proxy: _this.extractProxy(),
                        })
                            .then(function (response) {
                            var body = response.data;
                            if (!body || !Array.isArray(body)) {
                                console.log(body);
                                console.error(chalk_1.default.red('Received unexpected response from server while trying to enumerate templates.'));
                                process.exit(1);
                            }
                            var apiResult = body;
                            if (!apiResult.some(function (result) { return result.name === _this.argv.template; })) {
                                console.error(chalk_1.default.red("Template " + _this.argv.template + " did not exist."));
                                console.error(chalk_1.default.red('Valid templates are: '));
                                apiResult.forEach(function (result) {
                                    if (result.name === 'node-headless-ssr-proxy') {
                                        return;
                                    }
                                    console.error(chalk_1.default.yellow(result.name));
                                });
                                process.exit(1);
                            }
                            resolve(apiResult);
                        })
                            .catch(function (error) {
                            if (error.response) {
                                console.error(chalk_1.default.red("Server sent " + error.response.status + " " + error.response.statusText + " while enumerating templates."));
                            }
                            else {
                                console.error(chalk_1.default.red("Unexpected error " + error.message + " while trying to enumerate templates."));
                            }
                            process.exit(1);
                        });
                    })];
            });
        });
    };
    GitHubSource.prototype.downloadRepo = function (fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log(chalk_1.default.cyan("Acquiring templates from " + this.githubDownloadUrl + "..."));
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                axios_1.default
                                    .get(_this.githubDownloadUrl, {
                                    proxy: _this.extractProxy(),
                                    headers: { 'User-Agent': 'SitecoreJSSCLI' },
                                    responseType: 'stream',
                                })
                                    .then(function (response) {
                                    var fileStream = fs_1.default.createWriteStream(fileName, { autoClose: true });
                                    response.data.pipe(fileStream);
                                    response.data.on('error', reject);
                                    fileStream.on('finish', resolve);
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitHubSource.prototype.extractTemplateFiles = function (zipFile) {
        return __awaiter(this, void 0, void 0, function () {
            var filter;
            var _this = this;
            return __generator(this, function (_a) {
                console.log(chalk_1.default.cyan("Extracting template " + this.argv.template + "..."));
                filter = new RegExp("^[^/]+/samples/" + this.argv.template + "/(.+)");
                fs_1.default.mkdirSync(this.destinationPath);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        fs_1.default.readFile(zipFile, function (err, data) {
                            if (err) {
                                reject(err);
                            }
                            var jszip = new jszip_1.default();
                            var writePromises = [];
                            jszip.loadAsync(data).then(function (zip) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            zip
                                                .filter(function (innerPath) { return filter.test(innerPath); })
                                                .forEach(function (file) {
                                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                                var relativePath = filter.exec(file.name)[1];
                                                var outputPath = path_1.default.join(_this.destinationPath, relativePath);
                                                if (file.dir) {
                                                    // create directory
                                                    if (!fs_1.default.existsSync(outputPath)) {
                                                        console.log(chalk_1.default.gray("mkdir " + outputPath));
                                                        fs_1.default.mkdirSync(outputPath);
                                                    }
                                                }
                                                else {
                                                    // read file from zip, write to file
                                                    writePromises.push(file.async('nodebuffer').then(function (content) {
                                                        console.log(chalk_1.default.gray("write " + outputPath));
                                                        fs_1.default.writeFileSync(outputPath, content);
                                                    }));
                                                }
                                            });
                                            return [4 /*yield*/, Promise.all(writePromises)];
                                        case 1:
                                            _a.sent();
                                            resolve();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                        });
                    })];
            });
        });
    };
    GitHubSource.prototype.extractProxy = function () {
        if (!this.argv.proxy)
            return undefined;
        try {
            var proxy = new URL(this.argv.proxy);
            return {
                protocol: proxy.protocol.slice(0, -1),
                host: proxy.hostname,
                port: +proxy.port,
            };
        }
        catch (error) {
            console.error(chalk_1.default.red("Invalid proxy url provided " + this.argv.proxy));
            process.exit(1);
        }
    };
    return GitHubSource;
}());
exports.GitHubSource = GitHubSource;
