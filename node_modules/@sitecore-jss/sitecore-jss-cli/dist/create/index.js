"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyNameToProject = exports.applyNameToSitecoreConfig = exports.applyHostNameToSitecoreConfig = exports.applyNameToPackageJson = exports.applyNameReplacement = void 0;
var chalk_1 = __importDefault(require("chalk"));
var fs_1 = __importDefault(require("fs"));
var glob_1 = __importDefault(require("glob"));
var path_1 = __importDefault(require("path"));
/**
 * Apply name replacement on a given string
 * @param {string} value String to perform replacement on
 * @param {string} replaceName Name value to replace
 * @param {string} withName Name value to replace with
 */
function applyNameReplacement(value, replaceName, withName) {
    // Escapes a string literal for use in RegEx
    var escapeLiteral = function (literal) {
        return literal.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    };
    return value.replace(RegExp(escapeLiteral(replaceName), 'g'), withName);
}
exports.applyNameReplacement = applyNameReplacement;
/**
 * @param {PackageJson} pkg package.json object
 * @param {string} name App name
 * @param {string} [replaceName] Optional token which will enable "name replacement mode". If omitted, default/conventional values are used.
 */
function applyNameToPackageJson(pkg, name, replaceName) {
    pkg.name = name; // root name will never match "replaceName", so always set directly
    pkg.config.appName = replaceName
        ? applyNameReplacement(pkg.config.appName, replaceName, name)
        : name;
    if (pkg.config.sitecoreDistPath) {
        pkg.config.sitecoreDistPath = replaceName
            ? applyNameReplacement(pkg.config.sitecoreDistPath, replaceName, name)
            : "/dist/" + name;
    }
    if (pkg.config.graphQLEndpointPath) {
        pkg.config.graphQLEndpointPath = replaceName
            ? applyNameReplacement(pkg.config.graphQLEndpointPath, replaceName, name)
            : "/api/" + name;
    }
    return pkg;
}
exports.applyNameToPackageJson = applyNameToPackageJson;
/**
 * @param {string} configXml Sitecore configuration xml
 * @param {string} hostName App hostname
 */
function applyHostNameToSitecoreConfig(configXml, hostName) {
    // replace host name
    configXml = configXml.replace(/<site ((.|\n|\r)*?)hostName="[^"]+"/g, "<site $1hostName=\"" + hostName + "\"");
    return configXml;
}
exports.applyHostNameToSitecoreConfig = applyHostNameToSitecoreConfig;
/**
 * @param {string} configXml Sitecore configuration xml
 * @param {string} name App name
 * @param {string} [replaceName] Optional token which will enable "name replacement mode". If omitted, default/conventional values are used.
 */
function applyNameToSitecoreConfig(configXml, name, replaceName) {
    if (replaceName) {
        return applyNameReplacement(configXml, replaceName, name);
    }
    // replace site name
    configXml = configXml.replace(/<site ((.|\n|\r)*?)name="[^"]+"/g, "<site $1name=\"" + name + "\"");
    // replace root path
    configXml = configXml.replace(/<site ((.|\n|\r)*?)rootPath="[^"]+"/g, "<site $1rootPath=\"/sitecore/content/" + name + "\"");
    // replace jss app name
    configXml = configXml.replace(/<app ((.|\n|\r)*?)name="[^"]+"/g, "<app $1name=\"" + name + "\"");
    // replace jss app sitecorePath
    configXml = configXml.replace(/<app ((.|\n|\r)*?)sitecorePath="[^"]+"/g, "<app $1sitecorePath=\"/sitecore/content/" + name + "\"");
    // replace jss app graphQLEndpoint
    configXml = configXml.replace(/<app ((.|\n|\r)*?)graphQLEndpoint="[^"]+"/g, "<app $1graphQLEndpoint=\"/api/" + name + "\"");
    // replace GraphQL url
    configXml = configXml.replace(/<([^ ]+)GraphQLEndpoint ((.|\n|\r)*?)url="[^"]+"/g, "<" + name + "GraphQLEndpoint $2url=\"/api/" + name + "\"");
    configXml = configXml.replace(/<\/(.+)GraphQLEndpoint>/g, "</" + name + "GraphQLEndpoint>");
    // replace GraphQL templates path
    configXml = configXml.replace(/(<templates>\/sitecore\/templates\/Project\/)[^<]+(<\/templates>)/g, "$1" + name + "$2");
    return configXml;
}
exports.applyNameToSitecoreConfig = applyNameToSitecoreConfig;
/**
 * @param {string} projectFolder Project folder
 * @param {string} name App name
 * @param {string} hostName App hostname
 * @param {string} [replaceName] Optional token which will enable "name replacement mode" on project files. If omitted, default/conventional values are used.
 */
function applyNameToProject(projectFolder, name, hostName, replaceName) {
    // Apply name to package.json file
    console.log(chalk_1.default.cyan("Applying name " + name + " to package.json..."));
    var packagePath = path_1.default.join(projectFolder, 'package.json');
    var pkg = JSON.parse(fs_1.default.readFileSync(packagePath, 'utf8'));
    pkg = applyNameToPackageJson(pkg, name, replaceName);
    fs_1.default.writeFileSync(packagePath, JSON.stringify(pkg, null, 2));
    // Apply name and hostName to Sitecore config files
    var configFileIndex = 0;
    glob_1.default
        .sync(path_1.default.join(projectFolder, 'sitecore', 'config', '*.config'))
        .forEach(function (sitecoreConfigPath) {
        var configXml = fs_1.default.readFileSync(sitecoreConfigPath, 'utf8');
        console.log(chalk_1.default.cyan("Applying name " + name + " and hostName " + hostName + " to " + sitecoreConfigPath + "..."));
        configXml = applyNameToSitecoreConfig(configXml, name, replaceName);
        configXml = applyHostNameToSitecoreConfig(configXml, hostName);
        fs_1.default.unlinkSync(sitecoreConfigPath);
        var configFileIndexName = configFileIndex === 0 ? '' : configFileIndex;
        var finalConfigFileName = path_1.default.join(path_1.default.dirname(sitecoreConfigPath), "" + name + configFileIndexName + ".config");
        configFileIndex += 1;
        fs_1.default.writeFileSync(finalConfigFileName, configXml);
    });
}
exports.applyNameToProject = applyNameToProject;
