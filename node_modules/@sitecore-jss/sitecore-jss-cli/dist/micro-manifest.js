"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sitecore_jss_dev_tools_1 = require("@sitecore-jss/sitecore-jss-dev-tools");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var tmp_1 = __importDefault(require("tmp"));
var resolve_package_1 = __importDefault(require("./resolve-package"));
var manifest_1 = require("./scripts/manifest");
var package_1 = require("./scripts/package");
/**
 * @param {any} argv
 * @param {string} manifestContents
 */
function microManifest(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
argv, manifestContents) {
    return __awaiter(this, void 0, void 0, function () {
        var packageJson, jssConfig, legacyConfig;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sitecore_jss_dev_tools_1.verifySetup();
                    return [4 /*yield*/, resolve_package_1.default()];
                case 1:
                    packageJson = _a.sent();
                    if (!argv.appName) {
                        argv.appName = packageJson.config.appName;
                    }
                    if (!argv.appName) {
                        throw new Error('App Name was not defined as a parameter or in the package.json config');
                    }
                    return [4 /*yield*/, sitecore_jss_dev_tools_1.resolveScJssConfig({ configPath: argv.config })];
                case 2:
                    jssConfig = _a.sent();
                    if (!argv.deployUrl) {
                        legacyConfig = jssConfig.sitecore;
                        argv.deployUrl = legacyConfig.shipUrl ? legacyConfig.shipUrl : jssConfig.sitecore.deployUrl;
                    }
                    if (!argv.deployUrl) {
                        throw new Error('deployUrl was not defined as a parameter or in the scjssconfig.json file');
                    }
                    if (/\/ship\/services\/package/.test(argv.deployUrl)) {
                        throw new Error('deployUrl appears to be a Sitecore.Ship endpoint. JSS no longer uses Ship. You will need to reconfigure your endpoint to the JSS deploy service and provide an app shared secret to deploy.');
                    }
                    if (!argv.deploySecret) {
                        argv.deploySecret = jssConfig.sitecore.deploySecret;
                    }
                    if (!argv.deploySecret) {
                        throw new Error('deploySecret was not defined as a parameter or in the scjssconfig.json file');
                    }
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            tmp_1.default.dir({ unsafeCleanup: true }, function (err, tempDir, cleanupTempDir) { return __awaiter(_this, void 0, void 0, function () {
                                var manifestFolder, manifestArgs, packageDir, packageArgs, deployArgs;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (err) {
                                                reject(err);
                                            }
                                            manifestFolder = path_1.default.join(tempDir, 'manifest');
                                            if (!fs_1.default.existsSync(manifestFolder)) {
                                                fs_1.default.mkdirSync(manifestFolder);
                                            }
                                            manifestArgs = __assign({ manifestSourceFiles: [path_1.default.join(manifestFolder, 'tempManifestSource.js')], manifestOutputPath: path_1.default.join(manifestFolder, 'tempManifest.json'), noDictionary: true }, argv);
                                            // write temporary manifest source file to generate from
                                            fs_1.default.writeFileSync(manifestArgs.manifestSourceFiles[0], manifestContents, 'utf8');
                                            return [4 /*yield*/, manifest_1.handler(manifestArgs)];
                                        case 1:
                                            _a.sent();
                                            packageDir = path_1.default.join(tempDir, 'package');
                                            if (!fs_1.default.existsSync(packageDir)) {
                                                fs_1.default.mkdirSync(packageDir);
                                            }
                                            packageArgs = __assign({ skipManifest: true, noFiles: true, packageOutputPath: path_1.default.join(packageDir, 'tempPackage.manifest.zip') }, manifestArgs);
                                            return [4 /*yield*/, package_1.handler(packageArgs)];
                                        case 2:
                                            _a.sent();
                                            deployArgs = {
                                                appName: argv.appName,
                                                packagePath: packageArgs.packageOutputPath,
                                                importServiceUrl: argv.deployUrl,
                                                secret: argv.deploySecret,
                                                debugSecurity: argv.debugSecurity,
                                                acceptCertificate: argv.acceptCertificate,
                                            };
                                            return [4 /*yield*/, sitecore_jss_dev_tools_1.packageDeploy(deployArgs)];
                                        case 3:
                                            _a.sent();
                                            cleanupTempDir();
                                            resolve();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                        })];
            }
        });
    });
}
exports.default = microManifest;
