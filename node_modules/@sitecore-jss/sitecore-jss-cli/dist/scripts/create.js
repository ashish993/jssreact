"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.builder = void 0;
/* eslint-disable prettier/prettier */
var chalk_1 = __importDefault(require("chalk"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var create_source_folder_1 = require("../create/create.source.folder");
var create_source_github_1 = require("../create/create.source.github");
var run_package_script_1 = require("../run-package-script");
var spawn_1 = __importDefault(require("../spawn"));
/**
 * @param {any} yargs
 */
function builder(yargs) {
    return yargs.command('create <name> <template>', 'Creates a new JSS application based on one of the sample apps.', function (innerBuilder) {
        return innerBuilder
            .positional('name', {
            type: 'string',
            describe: 'The name of the app to create. ',
        })
            .positional('template', {
            type: 'string',
            describe: 'The template to create the app from; corresponds to folders in https://github.com/Sitecore/jss/tree/master/samples',
        })
            .option('hostName', {
            requiresArg: false,
            type: 'string',
            describe: 'Sets the host name of the Sitecore site if this app is deployed to Sitecore. Defaults to \'$name.dev.local\'',
        })
            .option('repository', {
            requiresArg: false,
            type: 'string',
            alias: 'r',
            default: 'Sitecore/jss',
            describe: 'Configures the GitHub repository to get the app from. Used to create from your own custom templates. Ex: myOrg/myRepository',
        })
            .option('branch', {
            requiresArg: false,
            type: 'string',
            alias: 'b',
            default: 'master',
            describe: 'Configures the GitHub branch to get the app from. Used to create from your own custom templates. Ex: beta',
        })
            .option('source', {
            requiresArg: false,
            type: 'string',
            alias: 's',
            describe: 'Sources the app template from a local filesystem path, instead of a GitHub repository. Good for private templates.',
        })
            .option('proxy', {
            requiresArg: false,
            type: 'string',
            describe: 'Specify a HTTP proxy when downloading templates.',
        });
    }, handler);
}
exports.builder = builder;
/**
 * @param {any} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function handler(argv) {
    return __awaiter(this, void 0, void 0, function () {
        var newProjectPath, createScriptPath, source, nextStepsList, createScript;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    newProjectPath = path_1.default.join(process.cwd(), argv.name);
                    createScriptPath = path_1.default.join(newProjectPath, 'jss-create.js');
                    argv.hostName = argv.hostName ? argv.hostName : argv.name + ".dev.local";
                    checkName(argv.name, newProjectPath);
                    source = argv.source
                        ? new create_source_folder_1.FolderSource(argv, newProjectPath)
                        : new create_source_github_1.GitHubSource(argv, newProjectPath);
                    return [4 /*yield*/, source.getFromSource()];
                case 1:
                    _a.sent();
                    installPackages(newProjectPath);
                    nextStepsList = ['* Enable source control (i.e. git init)'];
                    if (!argv.start) {
                        nextStepsList.push("* Try out your application with " + chalk_1.default.green("cd " + argv.name) + " then " + chalk_1.default.green('jss start'));
                    }
                    nextStepsList.push("* Connect to Sitecore with " + chalk_1.default.green('jss setup') + " (optional)");
                    nextStepsList.push('* Check out the JSS documentation at https://jss.sitecore.net');
                    if (!fs_1.default.existsSync(createScriptPath)) {
                        console.warn(chalk_1.default.yellow("Template " + argv.template + " did not have a jss-create.js in its root to invoke. No template configuration will be performed."));
                    }
                    else {
                        createScript = require(createScriptPath);
                        nextStepsList = createScript(argv, nextStepsList);
                        fs_1.default.unlinkSync(createScriptPath);
                    }
                    nextSteps(argv.name, nextStepsList);
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * @param {string} name
 * @param {string} proposedPath
 */
function checkName(name, proposedPath) {
    if (!/^[a-z\-_.]+$/.test(name)) {
        console.error(chalk_1.default.red(name + " is not a valid name; you may use lowercase letters, hyphens, and underscores only."));
        process.exit(1);
    }
    if (fs_1.default.existsSync(proposedPath)) {
        console.error(chalk_1.default.red(proposedPath + " already exists; please delete it first if you wish to overwrite."));
        process.exit(1);
    }
}
/**
 * @param {string} projectFolder
 */
function installPackages(projectFolder) {
    console.log(chalk_1.default.cyan('Installing packages...'));
    run_package_script_1.runPackageManagerCommand(['install'], { cwd: projectFolder, encoding: 'utf8' });
    // when we run `create` against development prerelease packages, we must:
    // a) run the command within the 'samples' folder of the jss repo
    // b) run `lerna bootstrap` to link the latest packages into the created app
    var lernaPath = path_1.default.join(projectFolder, '..', '..');
    if (fs_1.default.existsSync(path_1.default.join(lernaPath, 'lerna.json'))) {
        console.log(chalk_1.default.yellow('Detected development environment with Lerna monorepo. Running lerna bootstrap to link prerelease packages.'));
        // lerna throws if two packages have the same name, and right now
        // the template we instantiated will have the same package name
        // as the sample it came from (we replace vars etc later as that requires the local CLI to be installed)
        // Thus, we give it a temporary name here
        var packagePath = path_1.default.join(projectFolder, 'package.json');
        var existingPackage = JSON.parse(fs_1.default.readFileSync(packagePath, 'utf8'));
        existingPackage.name = 'temp-package-name-for-jss-lerna';
        fs_1.default.writeFileSync(packagePath, JSON.stringify(existingPackage, null, 2));
        // bootstrap
        spawn_1.default('npx', ['lerna', 'bootstrap'], {
            cwd: projectFolder,
            encoding: 'utf8',
        });
    }
}
/**
 * @param {string} name
 * @param {string[]} nextStepsArray
 */
function nextSteps(name, nextStepsArray) {
    console.log(chalk_1.default.red('                 -/oyhdmNNNNmdhyo/-                '));
    console.log(chalk_1.default.red('             :sdMMMMMMMMMMMMMMMMMMMMds:            '));
    console.log(chalk_1.default.red('          :yNMMMMMMMMMMMMMMMMMMMMMMMMMMNy:         '));
    console.log(chalk_1.default.red('        /mMMMMMMMMMNdyo+//://+shmMMMMMMMMMm/       '));
    console.log(chalk_1.default.red('      :mMMMMMMMMh+.              `:smMMMMMMMm:     '));
    console.log(chalk_1.default.red('    `yMMMMMMMm+`                     :yMMMMMMMs`   '));
    console.log(chalk_1.default.red('   `dMMMMMMN/                          .hMMMMMMd`  '));
    console.log(chalk_1.default.red('  `mMMMMMMh`                          -s/+MMMMMMd` '));
    console.log(chalk_1.default.red('  yMMMMMMh                        `:yNMMMs/MMMMMMy '));
    console.log(chalk_1.default.red(' :MMMMMMm`                       `hMMMMMMMsoMMMMMM-'));
    console.log(chalk_1.default.red(' yMMMMMM/                          dMMMMMMM:mMMMMMy'));
    console.log(chalk_1.default.red(' NMMMMMN`                          oMyossss:sMMMMMm'));
    console.log(chalk_1.default.red(' MMMMMMN                           yM:NMMMMyoMMMMMN'));
    console.log(chalk_1.default.red(' mMMMMMM`                         :Md+MMMMMoyMMMMMm'));
    console.log(chalk_1.default.red(' yMMMMMM+                        :NN+NMMMMM-NMMMMMy'));
    console.log(chalk_1.default.red(' :MMMMMMN:-                    `sMdyMNymMMosMMMMMM-'));
    console.log(chalk_1.default.red('  yMMMMMMd/o`                .oNdhmMhhMmh++MMMMMMy '));
    console.log(chalk_1.default.red('  `dMMMMMMm+do.-         ./oyhhhNNhyNMMNosMMMMMMd` '));
    console.log(chalk_1.default.red('   `dMMMMMMMssNdhsoo+/+oyyyydMmhhhMMMNs+mMMMMMMd`  '));
    console.log(chalk_1.default.red('    `yMMMMMMMNyydMNddddddddddhmMMMMho+dMMMMMMMy`   '));
    console.log(chalk_1.default.red('      :mMMMMMMMMmhhhdNMMMMMMMMmhssohMMMMMMMMm:     '));
    console.log(chalk_1.default.red('        /mMMMMMMMMMMNdhyyyyyyyhmMMMMMMMMMMm/       '));
    console.log(chalk_1.default.red('          :yNMMMMMMMMMMMMMMMMMMMMMMMMMMNy:         '));
    console.log(chalk_1.default.red('             :sdMMMMMMMMMMMMMMMMMMMMds:            '));
    console.log(chalk_1.default.red('                `-/oyhdmNNNNmdhyo/-                '));
    console.log();
    console.log(chalk_1.default.white('                      __________'));
    console.log(chalk_1.default.white('                  __ / / __/ __/'));
    console.log(chalk_1.default.white('                 / // /\\ \\_\\ \\  '));
    console.log(chalk_1.default.white('                 \\___/___/___/'));
    console.log();
    // gratuitous pause to admire the ascii art :p
    setTimeout(function () {
        console.log("JSS application " + chalk_1.default.green(name) + " is ready!");
        console.log();
        console.log(chalk_1.default.yellow('Next steps:'));
        nextStepsArray.forEach(function (step) { return console.log(step); });
        console.log();
        console.log(chalk_1.default.green('Enjoy!'));
    }, 2000);
}
