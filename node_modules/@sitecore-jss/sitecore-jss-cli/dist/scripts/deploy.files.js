"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
/* eslint-disable prettier/prettier */
var sitecore_jss_dev_tools_1 = require("@sitecore-jss/sitecore-jss-dev-tools");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var resolve_package_1 = __importDefault(require("../resolve-package"));
var run_package_script_1 = __importDefault(require("../run-package-script"));
exports.command = 'files';
exports.describe = 'Deploys the app\'s build artifact files to the Sitecore server using a direct file copy (no Sitecore items will be deployed). `jss deploy files --help` for options.';
exports.builder = {
    source: {
        requiresArg: false,
        type: 'string',
        describe: 'The artifact files to deploy. Defaults to \'buildArtifactsPath\' setting from package.json.',
    },
    destination: {
        requiresArg: false,
        type: 'string',
        describe: 'Destination path to deploy to. Defaults to the \'instancePath\' set in scjssconfig.json, combined with the \'sitecoreDistPath\' setting from package.json.',
    },
    config: {
        requiresArg: false,
        type: 'string',
        describe: 'Path to scjssconfig file.',
        default: './scjssconfig.json',
    },
    exclude: {
        requiresArg: false,
        type: 'array',
        describe: 'Filters specific file(s) from the deployment package by file name(s)',
        default: ['report.html'],
    },
    skipBuild: {
        requiresArg: false,
        type: 'boolean',
        describe: 'If true, no build task is invoked and any existing build artifacts at the source path are deployed.',
        default: false,
    },
    buildTaskName: {
        requiresArg: false,
        type: 'string',
        describe: 'Name of the npm script to run to perform a build before deploying. To skip running any script, use --skipBuild or pass the argument with a blank value.',
        default: 'build',
    },
    clean: {
        requiresArg: false,
        type: 'boolean',
        describe: 'Whether to delete all existing items in the destination before copying new artifacts.',
        default: false,
    },
};
/**
 * @param {any} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function handler(argv) {
    return __awaiter(this, void 0, void 0, function () {
        var options, packageJson, scJssConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sitecore_jss_dev_tools_1.verifySetup();
                    if (!argv.skipBuild && argv.buildTaskName && argv.buildTaskName.length > 0) {
                        run_package_script_1.default([argv.buildTaskName]);
                    }
                    options = {
                        destinationPath: argv.destination,
                        sourcePath: argv.source,
                        excludeFile: argv.exclude,
                        clean: argv.clean,
                    };
                    if (!(!options.sourcePath || !options.destinationPath)) return [3 /*break*/, 3];
                    return [4 /*yield*/, resolve_package_1.default()];
                case 1:
                    packageJson = _a.sent();
                    if (!options.sourcePath) {
                        options.sourcePath = packageJson.config.buildArtifactsPath;
                        if (!options.sourcePath) {
                            // nothing explicit set, let's try to imply a path. 'build/index.html' = CRA convention
                            if (fs_1.default.existsSync('build/index.html')) {
                                options.sourcePath = path_1.default.resolve('build');
                            }
                            else if (fs_1.default.existsSync('dist/client.bundle.js')) {
                                // /dist = non-CRA convention
                                options.sourcePath = path_1.default.resolve('dist');
                            }
                            else {
                                throw new Error('No source path specified, conventional build paths missing, and buildArtifactsPath config is not defined in package.json!');
                            }
                        }
                    }
                    if (!!options.destinationPath) return [3 /*break*/, 3];
                    return [4 /*yield*/, sitecore_jss_dev_tools_1.resolveScJssConfig({ configPath: argv.config })];
                case 2:
                    scJssConfig = _a.sent();
                    options.destinationPath = path_1.default.join(scJssConfig.sitecore.instancePath, packageJson.config.sitecoreDistPath);
                    _a.label = 3;
                case 3:
                    sitecore_jss_dev_tools_1.deploy(options);
                    return [2 /*return*/];
            }
        });
    });
}
exports.handler = handler;
