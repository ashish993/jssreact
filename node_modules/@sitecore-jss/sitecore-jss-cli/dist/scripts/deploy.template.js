"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.args = void 0;
/* eslint-disable prettier/prettier */
var chalk_1 = __importDefault(require("chalk"));
var micro_manifest_1 = __importDefault(require("../micro-manifest"));
/**
 * @param {Argv} yargs
 */
function builder(yargs) {
    return yargs.command('template <name>', 'Deploys a new template (or updates an existing template) to the Sitecore server when using Sitecore-first development. `jss deploy template --help` for options.', args, handler);
}
exports.default = builder;
/**
 * @param {Argv} yargs
 */
function args(yargs) {
    return yargs
        .positional('name', {
        type: 'string',
        describe: 'The name of the item to create or update.',
    })
        .option('displayName', {
        requiresArg: false,
        type: 'string',
        describe: 'Sets the display name of the item (visual name vs actual name)',
    })
        .option('fields', {
        requiresArg: false,
        type: 'array',
        describe: 'Creates template fields. Fields can be either a plain name, or name:fieldType. For example, --fields Foo Bar or --fields Foo "Bar Bas:Rich Text"',
    })
        .option('icon', {
        requiresArg: false,
        type: 'string',
        describe: 'Sets the icon of the item in Sitecore. For example, People/16x16/alarmclock.png',
    })
        .option('appName', {
        requiresArg: false,
        type: 'string',
        describe: 'The name of the app. Defaults to the package.json config value.',
    })
        .option('config', {
        requiresArg: false,
        type: 'string',
        describe: 'Path to scjssconfig file.',
        default: './scjssconfig.json',
    })
        .option('deployUrl', {
        requiresArg: false,
        type: 'string',
        describe: 'URL to the Sitecore JSS import service that accepts the package deployment. Defaults to the \'deployUrl\' in scjssconfig.json.',
    })
        .option('skipDeploy', {
        requiresArg: false,
        type: 'boolean',
        describe: 'If true, no deployment is made and the manifest registration code for code-first is written to the console instead.',
        default: false,
    })
        .option('acceptCertificate', {
        requiresArg: false,
        type: 'string',
        describe: 'Whitelists a specific SSL certificate thumbprint, regardless of normal SSL validation. Useful for self-signed certificates.',
    });
}
exports.args = args;
/**
 * @param {Argv} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function handler(argv) {
    return __awaiter(this, void 0, void 0, function () {
        var fields, definition, manifestSource;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fields = [];
                    if (argv.fields && argv.fields.length > 0) {
                        argv.fields.forEach(function (field) {
                            var splitField = field.split(':');
                            var fieldType = splitField.length === 1 ? 'Single-Line Text' : splitField[1];
                            fields.push({ name: splitField[0], type: fieldType });
                        });
                    }
                    definition = {
                        name: argv.name,
                        displayName: argv.displayName,
                        icon: argv.icon,
                        fields: fields,
                    };
                    manifestSource = "module.exports = {\n  default: function(manifest) {\n    manifest.addTemplate(" + JSON.stringify(definition, null, 2) + ");\n  }\n}";
                    if (!argv.skipDeploy) return [3 /*break*/, 1];
                    console.log(manifestSource);
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, micro_manifest_1.default(argv, manifestSource)];
                case 2:
                    _a.sent();
                    console.log();
                    console.log(chalk_1.default.green('Your template has been created (or updated)!'));
                    console.log();
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
}
