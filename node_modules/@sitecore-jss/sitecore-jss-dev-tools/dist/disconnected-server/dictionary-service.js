"use strict";
/* eslint-disable */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDisconnectedDictionaryService = void 0;
function defaultCustomizeDictionary(dictionary, language, appName) {
    // turn dictionary from { key: foo, value: bar } into { foo: bar }
    var finalDictionary = dictionary.reduce(function (result, current) {
        // eslint-disable-next-line no-param-reassign
        result[current.key] = current.value;
        return result;
    }, {});
    // restructure to look like dictionary service output
    return {
        lang: language,
        app: appName,
        phrases: finalDictionary,
    };
}
function createDisconnectedDictionaryService(_a) {
    var manifest = _a.manifest, customizeDictionary = _a.customizeDictionary, manifestLanguageChangeCallback = _a.manifestLanguageChangeCallback;
    var currentManifest = manifest;
    var service = {
        middleware: function disconnectedLayoutServiceMiddleware(request, response) {
            return __awaiter(this, void 0, void 0, function () {
                var language, appName, e_1, finalDictionary;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            language = request.params.language ? request.params.language : 'en';
                            appName = request.params.appName ? request.params.appname : 'JssDisconnectedDictionary';
                            if (!(currentManifest.language.toUpperCase() !== language.toUpperCase())) return [3 /*break*/, 6];
                            if (!(manifestLanguageChangeCallback &&
                                typeof manifestLanguageChangeCallback === 'function')) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, manifestLanguageChangeCallback(language)];
                        case 2:
                            currentManifest = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            console.error("> [LAYOUT] Error getting manifest in language '" + language + "'", e_1);
                            response.sendStatus(500);
                            return [2 /*return*/];
                        case 4: return [3 /*break*/, 6];
                        case 5:
                            console.error("> [DICTIONARY] ERROR: Received request for dictionary in " + language + " but the manifest data was in " + currentManifest.language + ". To enable switching languages at runtime, please pass 'manifestLanguageChangeCallback: function(newLanguage) { return manifestInNewLanguage; }' in the service creation options.");
                            response.sendStatus(404);
                            return [2 /*return*/];
                        case 6:
                            if (!currentManifest.dictionary) {
                                console.log('Dictionary service: no dictionary in current manifest. An empty dictionary will be returned.');
                                response.sendStatus(404);
                            }
                            finalDictionary = currentManifest.dictionary;
                            finalDictionary = defaultCustomizeDictionary(finalDictionary, language, appName);
                            if (customizeDictionary && typeof customizeDictionary === 'function') {
                                finalDictionary = customizeDictionary(finalDictionary, currentManifest.dictionary, request, response);
                            }
                            console.log("> [DICTIONARY] served in " + language);
                            response.json(finalDictionary);
                            return [2 /*return*/];
                    }
                });
            });
        },
        updateManifest: function (newManifest) {
            currentManifest = newManifest;
        },
    };
    service.updateManifest(manifest);
    return service;
}
exports.createDisconnectedDictionaryService = createDisconnectedDictionaryService;
