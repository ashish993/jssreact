"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeFs = void 0;
var fs_1 = __importDefault(require("fs"));
var js_yaml_1 = __importDefault(require("js-yaml"));
var path_1 = __importDefault(require("path"));
var IS_HIDDEN_FILE = function (file) { return path_1.default.basename(file).startsWith('.'); };
var tryParseJsonOrYaml = function (jsonString) {
    try {
        var json = js_yaml_1.default.safeLoad(jsonString);
        // handle non-exception-throwing cases
        if (json && typeof json === 'object' && json !== null) {
            return json;
        }
    }
    catch (e) {
        console.error(e);
    }
    return false;
};
var processFileSync = function (filePath, parseFileContents) {
    // if no encoding is specified, readFileSync returns a buffer instead of a string
    var contents = fs_1.default.readFileSync(filePath, 'utf8');
    if (contents) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var contentObject = void 0;
        if (parseFileContents) {
            contentObject = parseFileContents(filePath, contents);
        }
        if (!contentObject) {
            contentObject = tryParseJsonOrYaml(contents);
        }
        if (contentObject) {
            return {
                filename: path_1.default.basename(filePath),
                path: path_1.default.resolve(filePath),
                contents: contentObject,
            };
        }
    }
    return null;
};
var readDirSync = function (dir) {
    var result = {
        filesList: [],
        dirList: [],
    };
    if (IS_HIDDEN_FILE(dir)) {
        return result;
    }
    var list = fs_1.default.readdirSync(dir);
    if (!list) {
        return result;
    }
    list.forEach(function (file) {
        var filePath = path_1.default.join(dir, file);
        if (IS_HIDDEN_FILE(file)) {
            return;
        }
        var stats = fs_1.default.statSync(filePath);
        if (stats && stats.isDirectory()) {
            result.dirList.push(filePath);
        }
        else {
            result.filesList.push(filePath);
        }
    });
    return result;
};
var walkSync = function (dir, parseFileContents, depth) {
    if (depth === void 0) { depth = 0; }
    var results = {
        path: path_1.default.resolve(dir),
        name: path_1.default.basename(dir),
        files: [],
        folders: [],
    };
    var _a = readDirSync(dir), filesList = _a.filesList, dirList = _a.dirList;
    results.files = filesList
        .map(function (file) { return processFileSync(file, parseFileContents); })
        .filter(function (file) { return file; })
        .map(function (file) { return file; });
    results.folders = dirList.map(function (dirPath) { return walkSync(dirPath, parseFileContents, depth + 1); });
    return results;
};
exports.mergeFs = function (rootPath, parseFileContents) {
    return new Promise(function (resolve, reject) {
        if (!rootPath) {
            reject(new Error('rootPath is not defined'));
        }
        var result = walkSync(rootPath, parseFileContents);
        if (result) {
            resolve(result);
        }
        else {
            reject(new Error('no result generated'));
        }
    });
};
