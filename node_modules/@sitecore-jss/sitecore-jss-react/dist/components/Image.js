"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sitecore_jss_1 = require("@sitecore-jss/sitecore-jss");
var prop_types_1 = __importDefault(require("prop-types"));
var react_1 = __importDefault(require("react"));
var server_1 = __importDefault(require("react-dom/server"));
var utils_1 = require("../utils");
var getEditableWrapper = function (editableMarkup) {
    var otherProps = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        otherProps[_i - 1] = arguments[_i];
    }
    return (
    // create an inline wrapper and use dangerouslySetInnerHTML.
    // if we try to parse the EE value, the parser will strip invalid or disallowed attributes from html elements - and EE uses several
    react_1.default.createElement("span", __assign({ className: "sc-image-wrapper" }, otherProps, { dangerouslySetInnerHTML: { __html: editableMarkup } })));
};
var getImageAttrs = function (_a, imageParams, mediaUrlPrefix) {
    var src = _a.src, srcSet = _a.srcSet, otherAttrs = __rest(_a, ["src", "srcSet"]);
    if (!src) {
        return null;
    }
    var newAttrs = __assign({}, otherAttrs);
    // update image URL for jss handler and image rendering params
    var resolvedSrc = sitecore_jss_1.mediaApi.updateImageUrl(src, imageParams, mediaUrlPrefix);
    if (srcSet) {
        // replace with HTML-formatted srcset, including updated image URLs
        newAttrs.srcSet = sitecore_jss_1.mediaApi.getSrcSet(resolvedSrc, srcSet, imageParams, mediaUrlPrefix);
    }
    // always output original src as fallback for older browsers
    newAttrs.src = resolvedSrc;
    return newAttrs;
};
exports.Image = function (_a) {
    var media = _a.media, editable = _a.editable, imageParams = _a.imageParams, field = _a.field, mediaUrlPrefix = _a.mediaUrlPrefix, otherProps = __rest(_a, ["media", "editable", "imageParams", "field", "mediaUrlPrefix"]);
    // allows the mistake of using 'field' prop instead of 'media' (consistent with other helpers)
    if (field && !media) {
        media = field;
    }
    var dynamicMedia = media;
    if (!media ||
        (!dynamicMedia.editable && !dynamicMedia.value && !dynamicMedia.src)) {
        return null;
    }
    var imageField = dynamicMedia;
    // we likely have an experience editor value, should be a string
    if (editable && imageField.editable) {
        var foundImg = sitecore_jss_1.mediaApi.findEditorImageTag(imageField.editable);
        if (!foundImg) {
            return getEditableWrapper(imageField.editable);
        }
        var foundImgProps = utils_1.convertAttributesToReactProps(foundImg.attrs);
        // Note: otherProps may override values from foundImgProps, e.g. `style`, `className` prop
        // We do not attempt to merge.
        var imgAttrs = getImageAttrs(__assign(__assign({}, foundImgProps), otherProps), imageParams, mediaUrlPrefix);
        if (!imgAttrs) {
            return getEditableWrapper(imageField.editable);
        }
        var imgHtml = server_1.default.renderToStaticMarkup(react_1.default.createElement("img", __assign({}, imgAttrs)));
        var editableMarkup = imageField.editable.replace(foundImg.imgTag, imgHtml);
        return getEditableWrapper(editableMarkup);
    }
    // some wise-guy/gal is passing in a 'raw' image object value
    var img = dynamicMedia.src
        ? media
        : dynamicMedia.value;
    if (!img) {
        return null;
    }
    var attrs = getImageAttrs(__assign(__assign({}, img), otherProps), imageParams, mediaUrlPrefix);
    if (attrs) {
        return react_1.default.createElement("img", __assign({}, attrs));
    }
    return null; // we can't handle the truth
};
exports.Image.propTypes = {
    media: prop_types_1.default.oneOfType([
        prop_types_1.default.shape({
            src: prop_types_1.default.string,
        }),
        prop_types_1.default.shape({
            value: prop_types_1.default.object,
            editable: prop_types_1.default.string,
        }),
    ]),
    field: prop_types_1.default.oneOfType([
        prop_types_1.default.shape({
            src: prop_types_1.default.string,
        }),
        prop_types_1.default.shape({
            value: prop_types_1.default.object,
            editable: prop_types_1.default.string,
        }),
    ]),
    editable: prop_types_1.default.bool,
    mediaUrlPrefix: prop_types_1.default.instanceOf(RegExp),
    imageParams: prop_types_1.default.objectOf(prop_types_1.default.oneOfType([prop_types_1.default.number.isRequired, prop_types_1.default.string.isRequired]).isRequired),
};
exports.Image.defaultProps = {
    editable: true,
};
exports.Image.displayName = 'Image';
