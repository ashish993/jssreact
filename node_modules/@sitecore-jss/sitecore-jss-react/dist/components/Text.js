"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
exports.Text = function (_a) {
    var field = _a.field, tag = _a.tag, editable = _a.editable, encode = _a.encode, otherProps = __rest(_a, ["field", "tag", "editable", "encode"]);
    if (!field || (!field.editable && !field.value)) {
        return null;
    }
    // can't use editable value if we want to output unencoded
    if (!encode) {
        // eslint-disable-next-line no-param-reassign
        editable = false;
    }
    var value = (field.editable && editable ? field.editable : field.value) || '';
    var output = [value];
    // when value isn't formatted, we should format line breaks
    if (!field.editable && value) {
        var splitted_1 = String(value).split('\n');
        if (splitted_1.length) {
            output = [];
        }
        splitted_1.forEach(function (str, i) {
            var isLast = i === splitted_1.length - 1;
            output.push(str);
            if (!isLast) {
                output.push(react_1.default.createElement("br", { key: i }));
            }
        });
    }
    var setDangerously = (field.editable && editable) || !encode;
    var children = null;
    var htmlProps = __assign({}, otherProps);
    if (setDangerously) {
        htmlProps.dangerouslySetInnerHTML = {
            __html: output,
        };
    }
    else {
        children = output;
    }
    if (tag || setDangerously) {
        return react_1.default.createElement(tag || 'span', htmlProps, children);
    }
    else {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }
};
exports.Text.propTypes = {
    field: prop_types_1.default.shape({
        value: prop_types_1.default.string,
        editable: prop_types_1.default.string,
    }),
    tag: prop_types_1.default.string,
    editable: prop_types_1.default.bool,
    encode: prop_types_1.default.bool,
};
exports.Text.defaultProps = {
    editable: true,
    encode: true,
};
exports.Text.displayName = 'Text';
