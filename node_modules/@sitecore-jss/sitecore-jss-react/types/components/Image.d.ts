import React from 'react';
export interface ImageFieldValue {
    [attributeName: string]: unknown;
    src?: string;
}
export interface ImageField {
    value?: ImageFieldValue;
    editable?: string;
}
export interface ImageSizeParameters {
    [attr: string]: string | number | undefined;
    /** Fixed width of the image */
    w?: number;
    /** Fixed height of the image */
    h?: number;
    /** Max width of the image */
    mw?: number;
    /** Max height of the image */
    mh?: number;
    /** Ignore aspect ratio */
    iar?: 1 | 0;
    /** Allow stretch */
    as?: 1 | 0;
    /** Image scale. Defaults to 1.0 */
    sc?: number;
}
export interface ImageProps {
    [attributeName: string]: unknown;
    /**
     * The image field data.
     * @deprecated use field property instead
     */
    media?: ImageField | ImageFieldValue;
    /** Image field data (consistent with other field types) */
    field?: ImageField | ImageFieldValue;
    /**
     * Can be used to explicitly disable inline editing.
     * If true and `media.editable` has a value, then `media.editable` will be processed
     * and rendered as component output. If false, `media.editable` value will be ignored and not rendered.
     */
    editable?: boolean;
    /**
     * Parameters that will be attached to Sitecore media URLs
     */
    imageParams?: {
        [paramName: string]: string | number;
    };
    srcSet?: ImageSizeParameters[];
    /**
     * Custom regexp that finds media URL prefix that will be replaced by `/-/jssmedia` or `/~/jssmedia`.
     * @example
     * /\/([-~]{1})assets\//i
     * /-assets/website -> /-/jssmedia/website
     * /~assets/website -> /~/jssmedia/website
     */
    mediaUrlPrefix?: RegExp;
}
export declare const Image: React.SFC<ImageProps>;
