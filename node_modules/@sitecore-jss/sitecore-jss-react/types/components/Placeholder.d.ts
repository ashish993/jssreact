import React from 'react';
import { PlaceholderProps } from './PlaceholderCommon';
import { ComponentRendering, HtmlElementRendering } from '@sitecore-jss/sitecore-jss';
export interface PlaceholderComponentProps extends PlaceholderProps {
    /**
     * Render props function that is called when the placeholder contains no content components.
     * Can be used to wrap the Sitecore EE empty placeholder markup in something that's visually correct
     */
    renderEmpty?: (components: React.ReactNode[]) => React.ComponentClass<unknown> | React.SFC<unknown> | React.ReactNode;
    /**
     * Render props function that enables control over the rendering of the components in the placeholder.
     * Useful for techniques like wrapping each child in a wrapper component.
     */
    render?: (components: React.ReactNode[], data: (ComponentRendering | HtmlElementRendering)[], props: PlaceholderProps) => React.ComponentClass<unknown> | React.SFC<unknown> | React.ReactNode;
    /**
     * Render props function that is called for each non-system component added to the placeholder.
     * Mutually exclusive with `render`. System components added during Experience Editor are automatically rendered as-is.
     */
    renderEach?: (component: React.ReactNode, index: number) => React.ComponentClass<unknown> | React.SFC<unknown> | React.ReactNode;
}
export declare const Placeholder: (props: PlaceholderComponentProps) => JSX.Element;
