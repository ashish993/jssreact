import React from 'react';
import PropTypes from 'prop-types';
import { ComponentFactory } from './sharedTypes';
export interface SitecoreContextProps<ContextType = any> {
    componentFactory: ComponentFactory;
    context?: ContextType;
}
export interface SitecoreContextState<ContextType = any> {
    setContext: (value: ContextType) => void;
    context: ContextType;
}
export declare const SitecoreContextReactContext: React.Context<SitecoreContextState<any>>;
export declare const ComponentFactoryReactContext: React.Context<ComponentFactory>;
export declare class SitecoreContext<ContextType = any> extends React.Component<SitecoreContextProps<ContextType>, SitecoreContextState<ContextType>> {
    static propTypes: {
        children: PropTypes.Validator<any>;
        componentFactory: PropTypes.Requireable<(...args: any[]) => any>;
        context: PropTypes.Requireable<any>;
    };
    static displayName: string;
    constructor(props: SitecoreContextProps<ContextType>);
    setContext: (value: ContextType) => void;
    render(): JSX.Element;
}
