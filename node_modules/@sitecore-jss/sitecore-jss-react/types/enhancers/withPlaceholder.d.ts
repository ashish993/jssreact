import React from 'react';
import { ComponentRendering, RouteData } from '@sitecore-jss/sitecore-jss';
import { PlaceholderProps } from '../components/PlaceholderCommon';
export interface WithPlaceholderOptions {
    /**
     * Function to map incoming placeholder props into rendering data to use for the placeholder data.
     * Normally in a JSS component, props.rendering is passed the component data, and that is the default.
     * However, if your component data is in a different prop, like say 'route' in a sample app,
     * this lets you map that.
     */
    resolvePlaceholderDataFromProps?: (props: unknown) => ComponentRendering | RouteData;
    /**
     * Function to alter the placeholder props from within the HOC. Enables the props to be
     * transformed before being used by the placeholder/HOC, for example to customize the
     * error or missing component display
     */
    propsTransformer?: (props: PlaceholderProps) => PlaceholderProps;
}
export interface PlaceholderToPropMapping {
    /**
     * The name of the placeholder this component will expose
     */
    placeholder: string;
    /**
     * The name of the prop on your wrapped component that you would like the placeholder data injected on
     */
    prop: string;
}
export declare type WithPlaceholderSpec = (string | PlaceholderToPropMapping) | (string | PlaceholderToPropMapping)[];
/**
 * @param {WithPlaceholderSpec} placeholders
 * @param {WithPlaceholderOptions} [options]
 */
export declare function withPlaceholder(placeholders: WithPlaceholderSpec, options?: WithPlaceholderOptions): (WrappedComponent: React.ComponentClass<any, any> | React.SFC<any>) => (props: PlaceholderProps) => JSX.Element;
