import { Application } from 'express';
import { PathParams } from 'express-serve-static-core';
import webpack from 'webpack';
import WebpackDevMiddleware from 'webpack-dev-middleware';
import WebpackDevServer from 'webpack-dev-server';
import { AppInvocationInfoResolver, SSRMiddleware } from './ssrMiddleware';
export interface ConfigFactoryResult {
    ssrWebpackConfig: webpack.Configuration;
    clientWebpackConfig: webpack.Configuration;
    devServerConfig: WebpackDevServer.Configuration;
}
export declare type ConfigFactory = (nodeEnv?: string, tunnelUrl?: string) => ConfigFactoryResult;
export interface DevServerOptions {
    configFactory: ConfigFactory;
    /**
     * Path to the build artifacts from your SSR Webpack configuration. By default,
     * we'll use the 'ssrWebpackConfig.output.path' value. But you can specify a different
     * value with the 'buildArtifactsPath' property. Note: this does _not_ replace the
     * value specified in your Webpack configuration, instead this value is used for resolving
     * the path to your app's server bundle.
     */
    buildArtifactsPath?: string;
    serverBundleFileName?: string;
    /**
     * The port number the server should listen on. Defaults to `0` if no value is provided;
     * @default 0
     */
    port?: number;
    /**
     * The hostname the server should bind to. Defaults to `localhost` if no value is provided.
     * @default localhost
     */
    hostname?: string;
    tunnelUrl?: string;
    urlToOpenOnStart?: string;
    hooks?: {
        beforeWebpackCompilerCreation?: (clientWebpackConfig: webpack.Configuration, ssrWebpackConfig: webpack.Configuration) => void;
        beforeSSRMiddlewareRegistered?: (app: Application, server: WebpackDevServer) => void;
        beforeDevServerCreated?: (compiler: webpack.MultiCompiler, devServerOptions: WebpackDevServer.Configuration & WebpackDevMiddleware.Options) => void;
        beforeDevServerStarted?: (devServer: WebpackDevServer) => void;
        afterDevServerStarted?: (devServer: WebpackDevServer) => void;
    };
    ssrMiddleware?: SSRMiddleware;
    /**
     * Defines the path for which the SSR Middleware is invoked. Defaults to `'*'` if no value is provided.
     * More information can be found in the Express docs: https://expressjs.com/en/4x/api.html#path-examples
     * @default '*'
     */
    ssrMiddlewarePath?: PathParams;
    appInvocationInfoResolver?: AppInvocationInfoResolver;
    clean?: boolean;
}
/**
 * @param {any} config
 */
export declare function startDevServer({ port, tunnelUrl, configFactory, buildArtifactsPath: customBuildArtifactsPath, serverBundleFileName: customServerBundleFileName, urlToOpenOnStart, hooks, ssrMiddleware, ssrMiddlewarePath, appInvocationInfoResolver: customAppInvocationInfoResolver, clean, }: DevServerOptions): void;
