import { Express, RequestHandler } from 'express';
import { PathParams } from 'express-serve-static-core';
import { AppInvocationInfoResolver, SSRMiddleware } from './ssrMiddleware';
export interface RenderingHostServerOptions {
    /**
     * The port number the server should listen on. Defaults to `0` if no value is provided;
     * @default 0
     */
    port?: number;
    /**
     * The hostname the server should bind to. Defaults to `localhost` if no value is provided.
     * @default localhost
     */
    hostname?: string;
    hooks?: {
        beforeSSRMiddlewareRegistered?: (server: Express) => void;
        beforeStaticFileMiddlewareRegistered?: (server: Express) => void;
        beforeServerStarted?: (server: Express) => void;
        afterServerStarted?: (server: Express) => void;
    };
    ssrMiddleware?: SSRMiddleware;
    /**
     * Defines the path for which the SSR Middleware is invoked. Defaults to `'*'` if no value is provided.
     * More information can be found in the Express docs: https://expressjs.com/en/4x/api.html#path-examples
     * @default '*'
     */
    ssrMiddlewarePath?: PathParams;
    appInvocationInfoResolver?: AppInvocationInfoResolver;
    middlewares: {
        compression?: RequestHandler;
    };
    enableCompression?: boolean;
}
/**
 * @param {any} config
 */
export declare function startRenderingHostServer({ port, hostname, hooks, middlewares, enableCompression, ssrMiddleware, ssrMiddlewarePath, appInvocationInfoResolver: customAppInvocationInfoResolver, }: RenderingHostServerOptions): void;
