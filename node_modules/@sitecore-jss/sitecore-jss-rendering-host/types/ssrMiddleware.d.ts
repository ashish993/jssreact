/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
export declare type RenderCallback = (errorValue: Error, successValue?: any) => void;
export declare type RenderFunction = (callback: RenderCallback, ...args: any[]) => void;
export interface AppInvocationInfo {
    renderFunction: RenderFunction;
    renderFunctionArgs: any[];
    renderFunctionCallback?: RenderCallback;
}
export declare type AppInvocationInfoResolver = (bodyJson: string, req: IncomingMessage, res: ServerResponse) => AppInvocationInfo;
export interface SSRMiddlewareOptions {
    appInvocationInfoResolver: AppInvocationInfoResolver;
}
export declare type WebServerMiddleware = (req: IncomingMessage, res: ServerResponse, next?: (err?: any) => void) => void;
export declare type SSRMiddleware = (options: SSRMiddlewareOptions) => WebServerMiddleware;
export declare const ssrMiddleware: SSRMiddleware;
/**
 * @param {ServerResponse} res
 */
export declare function getDefaultAppRendererCallback(res: ServerResponse): RenderCallback;
/**
 * @param {IncomingMessage} request
 */
export declare function readRequestBodyAsJson(request: IncomingMessage): Promise<unknown>;
/**
 * @param {ServerResponse} res
 * @param {Error} errorValue
 */
export declare function respondWithError(res: ServerResponse, errorValue: Error): void;
/**
 * @param {Object} dataWriter
 * @param {Buffer} dataWriter.output
 */
export declare function onReadableStreamDataHandler(dataWriter: {
    output: Buffer;
}): (data: any) => void;
/**
 * @param {Buffer} data
 * @param {string} [contentEncoding]
 */
export declare function extractJsonFromStreamData(data: Buffer, contentEncoding?: string): Promise<any>;
/**
 * @param {string} jsonString
 */
export declare function tryParseJson(jsonString: string): any;
