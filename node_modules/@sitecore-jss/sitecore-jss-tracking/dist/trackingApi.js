"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sitecore_jss_1 = require("@sitecore-jss/sitecore-jss");
var ResponseError = /** @class */ (function (_super) {
    __extends(ResponseError, _super);
    function ResponseError(message, response) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ResponseError.prototype);
        _this.response = response;
        return _this;
    }
    return ResponseError;
}(Error));
/**
 * @param {HttpResponse<unknown>} response
 */
function checkStatus(response) {
    if (response.status >= 200 && response.status < 300) {
        return response;
    }
    var error = new ResponseError(response.statusText, response);
    throw error;
}
/**
 * note: encodeURIComponent is available via browser (window) or natively in node.js
 * if you use another js engine for server-side rendering you may not have native encodeURIComponent
 * and would then need to install a package for that functionality
 * @param {Object} params
 */
function getQueryString(params) {
    return Object.keys(params)
        .map(function (k) { return encodeURIComponent(k) + "=" + encodeURIComponent(params[k]); })
        .join('&');
}
/**
 * Note: axios needs to use `withCredentials: true` in order for Sitecore cookies to be included in CORS requests
 * which is necessary for analytics and such
 * @param {string} url
 * @param {any} data
 * @param {HttpJsonFetcher<T>} fetcher
 * @param {Object} params
 */
function fetchData(url, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
data, fetcher, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
params) {
    if (params === void 0) { params = {}; }
    var qs = getQueryString(params);
    var fetchUrl = url.indexOf('?') !== -1 ? url + "&" + qs : url + "?" + qs;
    return fetcher(fetchUrl, data)
        .then(checkStatus)
        .then(function (response) {
        // axios auto-parses JSON responses, don't need to JSON.parse
        return response.data;
    });
}
/**
 * @param {TrackingRequestOptions} options
 */
function resolveTrackingUrl(options) {
    var _a = options.host, host = _a === void 0 ? '' : _a, _b = options.serviceUrl, serviceUrl = _b === void 0 ? '/sitecore/api/jss/track' : _b, _c = options.action, action = _c === void 0 ? 'event' : _c;
    return "" + host + serviceUrl + "/" + action;
}
/**
 * Makes a request to Sitecore Layout Service for the specified route item path.
 * @param {Array<EventInstance | GoalInstance | OutcomeInstance | CampaignInstance | PageViewInstance>} events
 * @param {TrackingRequestOptions} options
 * @returns {Promise<void>} void
 */
function trackEvent(events, options) {
    var querystringParams = options.querystringParams;
    if (!options.test && sitecore_jss_1.isServer()) {
        // do nothing for SSR, only track events when a browser requests it
        return Promise.resolve();
    }
    if (!Array.isArray(events)) {
        events = [events];
    }
    var fetchUrl = resolveTrackingUrl(options);
    return fetchData(fetchUrl, events, options.fetcher, querystringParams);
}
exports.trackEvent = trackEvent;
