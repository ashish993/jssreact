"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var AxiosDataFetcher = /** @class */ (function () {
    /**
     * @param {AxiosDataFetcherConfig} dataFetcherConfig Axios data fetcher configuration.
     * Note `withCredentials` is set to `true` by default in order for Sitecore cookies to
     * be included in CORS requests (which is necessary for analytics and such).
     */
    function AxiosDataFetcher(dataFetcherConfig) {
        if (dataFetcherConfig === void 0) { dataFetcherConfig = {}; }
        var onReq = dataFetcherConfig.onReq, onRes = dataFetcherConfig.onRes, onReqError = dataFetcherConfig.onReqError, onResError = dataFetcherConfig.onResError, axiosConfig = __rest(dataFetcherConfig, ["onReq", "onRes", "onReqError", "onResError"]);
        if (axiosConfig.withCredentials === undefined) {
            axiosConfig.withCredentials = true;
        }
        this.instance = axios_1.default.create(axiosConfig);
        if (onReq) {
            this.instance.interceptors.request.use(onReq, onReqError);
        }
        if (onRes) {
            this.instance.interceptors.response.use(onRes, onResError);
        }
    }
    /**
     * Implements a data fetcher. @see HttpJsonFetcher<T> type for implementation details/notes.
     * @param {string} url The URL to request; may include query string
     * @param {any} [data] Optional data to POST with the request.
     * @returns {Promise<AxiosResponse<T>>} response
     */
    AxiosDataFetcher.prototype.fetch = function (url, data) {
        return this.instance.request({
            url: url,
            method: data ? 'POST' : 'GET',
            data: data,
        });
    };
    /**
     * Perform a GET request
     * @param {string} url The URL to request; may include query string
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse<T>>} response
     */
    AxiosDataFetcher.prototype.get = function (url, config) {
        return this.instance.get(url, config);
    };
    /**
     * Perform a HEAD request
     * @param {string} url The URL to request; may include query string
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    AxiosDataFetcher.prototype.head = function (url, config) {
        return this.instance.head(url, config);
    };
    /**
     * Perform a POST request
     * @param {string} url The URL to request; may include query string
     * @param {any} [data] Data to POST with the request.
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    AxiosDataFetcher.prototype.post = function (url, data, config) {
        return this.instance.post(url, data, config);
    };
    /**
     * Perform a PUT request
     * @param {string} url The URL to request; may include query string
     * @param {any} [data] Data to PUT with the request.
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    AxiosDataFetcher.prototype.put = function (url, data, config) {
        return this.instance.put(url, data, config);
    };
    /**
     * Perform a DELETE request
     * @param {string} url The URL to request; may include query string
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    AxiosDataFetcher.prototype.delete = function (url, config) {
        return this.instance.delete(url, config);
    };
    return AxiosDataFetcher;
}());
exports.AxiosDataFetcher = AxiosDataFetcher;
