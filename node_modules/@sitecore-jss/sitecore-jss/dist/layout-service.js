"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_fetcher_1 = require("./data-fetcher");
var dataApi_1 = require("./dataApi");
/**
 * Fetch layout data using the Sitecore Layout Service REST API.
 * Uses Axios as the default data fetcher (@see AxiosDataFetcher).
 */
var RestLayoutService = /** @class */ (function () {
    function RestLayoutService(serviceConfig) {
        var _this = this;
        this.serviceConfig = serviceConfig;
        /**
         * Provides fetch options in order to fetch data
         * @param {string} [language] language will be applied to `sc_lang` param
         * @returns {FetchOptions} fetch options
         */
        this.getFetchOptions = function (language) {
            var _a;
            var params = {
                sc_apikey: _this.serviceConfig.apiKey,
                sc_site: _this.serviceConfig.siteName,
                sc_lang: language || '',
                tracking: (_a = _this.serviceConfig.tracking, (_a !== null && _a !== void 0 ? _a : true)),
            };
            return {
                layoutServiceConfig: {
                    host: _this.serviceConfig.apiHost,
                },
                querystringParams: __assign({}, params),
            };
        };
        /**
         * Provides default @see AxiosDataFetcher data fetcher
         * @param {IncomingMessage} [req] Request instance
         * @param {ServerResponse} [res] Response instance
         * @returns default fetcher
         */
        this.getDefaultFetcher = function (req, res) {
            var config = {};
            if (req && res) {
                config.onReq = _this.setupReqHeaders(req);
                config.onRes = _this.setupResHeaders(res);
            }
            var axiosFetcher = new data_fetcher_1.AxiosDataFetcher(config);
            var fetcher = function (url, data) {
                return axiosFetcher.fetch(url, data);
            };
            return fetcher;
        };
    }
    /**
     * Fetch layout data for an item.
     * @param {string} itemPath
     * @param {string} [language]
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<LayoutServiceData>} layout service data
     */
    RestLayoutService.prototype.fetchLayoutData = function (itemPath, language, req, res) {
        var fetchOptions = this.getFetchOptions(language);
        var fetcher = this.serviceConfig.dataFetcherResolver
            ? this.serviceConfig.dataFetcherResolver(req, res)
            : this.getDefaultFetcher(req, res);
        return dataApi_1.fetchRouteData(itemPath, __assign({ fetcher: fetcher }, fetchOptions));
    };
    /**
     * Fetch layout data for a particular placeholder.
     * Makes a request to Sitecore Layout Service for the specified placeholder in
     * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.
     * @param {string} placeholderName
     * @param {string} itemPath
     * @param {string} [language]
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<PlaceholderData>} placeholder data
     */
    RestLayoutService.prototype.fetchPlaceholderData = function (placeholderName, itemPath, language, req, res) {
        var fetchOptions = this.getFetchOptions(language);
        var fetcher = this.serviceConfig.dataFetcherResolver
            ? this.serviceConfig.dataFetcherResolver(req, res)
            : this.getDefaultFetcher(req, res);
        return dataApi_1.fetchPlaceholderData(placeholderName, itemPath, __assign({ fetcher: fetcher }, fetchOptions));
    };
    /**
     * Setup request headers
     * @param {IncomingMessage} req
     * @returns {AxiosRequestConfig} axios request config
     */
    RestLayoutService.prototype.setupReqHeaders = function (req) {
        return function (reqConfig) {
            reqConfig.headers.common = __assign(__assign(__assign(__assign(__assign({}, reqConfig.headers.common), (req.headers.cookie && { cookie: req.headers.cookie })), (req.headers.referer && { referer: req.headers.referer })), (req.headers['user-agent'] && { 'user-agent': req.headers['user-agent'] })), (req.connection.remoteAddress && { 'X-Forwarded-For': req.connection.remoteAddress }));
            return reqConfig;
        };
    };
    /**
     * Setup response headers based on response from layout service
     * @param {ServerResponse} res
     * @returns {AxiosResponse} response
     */
    RestLayoutService.prototype.setupResHeaders = function (res) {
        return function (serverRes) {
            serverRes.headers['set-cookie'] &&
                res.setHeader('set-cookie', serverRes.headers['set-cookie']);
            return serverRes;
        };
    };
    return RestLayoutService;
}());
exports.RestLayoutService = RestLayoutService;
