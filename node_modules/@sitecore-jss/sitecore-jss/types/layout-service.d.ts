/// <reference types="node" />
import { LayoutServiceData, PlaceholderData } from './dataModels';
import { HttpJsonFetcher } from './httpClientInterface';
import { IncomingMessage, ServerResponse } from 'http';
export interface LayoutService {
    /**
     * Fetch layout data for an item.
     * @param {string} itemPath
     * @param {string} [language]
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<LayoutServiceData>} layout data
     */
    fetchLayoutData(itemPath: string, language?: string, req?: IncomingMessage, res?: ServerResponse): Promise<LayoutServiceData>;
}
export declare type DataFetcherResolver = <T>(req?: IncomingMessage, res?: ServerResponse) => HttpJsonFetcher<T>;
export declare type RestLayoutServiceConfig = {
    /**
     * Your Sitecore instance hostname that is the backend for JSS
     */
    apiHost: string;
    /**
     * The Sitecore SSC API key your app uses
     */
    apiKey: string;
    /**
     * The JSS application name
     */
    siteName: string;
    /**
     * Enables/disables analytics tracking for the Layout Service invocation (default is true).
     * More than likely, this would be set to false for SSG/hybrid implementations, and the
     * JSS tracker would instead be used on the client-side: {@link https://jss.sitecore.com/docs/fundamentals/services/tracking}
     * @default true
     */
    tracking?: boolean;
    /**
     * Data fetcher resolver in order to provide custom data fetcher
     * @see DataFetcherResolver
     * @see HttpJsonFetcher<T>
     * @see AxiosDataFetcher used by default
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     */
    dataFetcherResolver?: DataFetcherResolver;
};
/**
 * Fetch layout data using the Sitecore Layout Service REST API.
 * Uses Axios as the default data fetcher (@see AxiosDataFetcher).
 */
export declare class RestLayoutService implements LayoutService {
    private serviceConfig;
    constructor(serviceConfig: RestLayoutServiceConfig);
    /**
     * Fetch layout data for an item.
     * @param {string} itemPath
     * @param {string} [language]
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<LayoutServiceData>} layout service data
     */
    fetchLayoutData(itemPath: string, language?: string, req?: IncomingMessage, res?: ServerResponse): Promise<LayoutServiceData>;
    /**
     * Fetch layout data for a particular placeholder.
     * Makes a request to Sitecore Layout Service for the specified placeholder in
     * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.
     * @param {string} placeholderName
     * @param {string} itemPath
     * @param {string} [language]
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<PlaceholderData>} placeholder data
     */
    fetchPlaceholderData(placeholderName: string, itemPath: string, language?: string, req?: IncomingMessage, res?: ServerResponse): Promise<PlaceholderData>;
    /**
     * Provides fetch options in order to fetch data
     * @param {string} [language] language will be applied to `sc_lang` param
     * @returns {FetchOptions} fetch options
     */
    private getFetchOptions;
    /**
     * Provides default @see AxiosDataFetcher data fetcher
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns default fetcher
     */
    private getDefaultFetcher;
    /**
     * Setup request headers
     * @param {IncomingMessage} req
     * @returns {AxiosRequestConfig} axios request config
     */
    private setupReqHeaders;
    /**
     * Setup response headers based on response from layout service
     * @param {ServerResponse} res
     * @returns {AxiosResponse} response
     */
    private setupResHeaders;
}
