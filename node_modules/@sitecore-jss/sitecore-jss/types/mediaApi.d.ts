/**
 * Makes a request to Sitecore Content Service for the specified item path.
 * @param {string} editorMarkup
 * @returns {Object | null} found image tag
 */
export declare const findEditorImageTag: (editorMarkup: string) => {
    imgTag: string;
    attrs: {
        [key: string]: string;
    };
} | null;
/**
 * Get required query string params which should be merged with user params
 * @param {object} qs layout service parsed query string
 * @returns {object} requiredParams
 */
export declare const getRequiredParams: (qs: {
    [key: string]: string | undefined;
}) => {
    rev: string | undefined;
    db: string | undefined;
    la: string | undefined;
    vs: string | undefined;
    ts: string | undefined;
};
/**
 * Receives a Sitecore media URL and replaces `/~/media` or `/-/media` with `/~/jssmedia` or `/-/jssmedia`, respectively.
 * Can use `mediaUrlPrefix` in order to use custom checker.
 * This replacement allows the JSS media handler to be used for JSS app assets.
 * Also, any provided `params` are used as the querystring parameters for the media URL.
 * @param {string} url
 * @param {Object} [params]
 * @param {RegExp} [mediaUrlPrefix=mediaUrlPrefixRegex]
 * @returns {string} url
 */
export declare const updateImageUrl: (url: string, params?: {
    [key: string]: string | number | undefined;
} | null | undefined, mediaUrlPrefix?: RegExp) => string;
/**
 * Receives an array of `srcSet` parameters that are iterated and used as parameters to generate
 * a corresponding set of updated Sitecore media URLs via @see updateImageUrl. The result is a comma-delimited
 * list of media URLs with respective dimension parameters.
 *
 * @example
 * // returns '/ipsum.jpg?h=1000&w=1000 1000w, /ipsum.jpg?mh=250&mw=250 250w'
 * getSrcSet('/ipsum.jpg', [{ h: 1000, w: 1000 }, { mh: 250, mw: 250 } ])
 *
 * More information about `srcSet`: {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img}
 *
 * @param {string} url
 * @param {Array} srcSet
 * @param {Object} [imageParams]
 * @param {RegExp} [mediaUrlPrefix]
 * @returns {string} src set
 */
export declare const getSrcSet: (url: string, srcSet: {
    [key: string]: string | number | undefined;
}[], imageParams?: {
    [key: string]: string | number | undefined;
} | undefined, mediaUrlPrefix?: RegExp | undefined) => string;
