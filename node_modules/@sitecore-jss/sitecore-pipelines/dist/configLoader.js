"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var pipelinesRegistry_1 = require("./pipelinesRegistry");
var utils_1 = require("./utils");
// './**/pipeline.config.js'
var config = function (_a) {
    var _b = _a.fileGlobs, fileGlobs = _b === void 0 ? [] : _b, _c = _a.workingDirectory, workingDirectory = _c === void 0 ? '' : _c, _d = _a.existingConfig, existingConfig = _d === void 0 ? {} : _d, _e = _a.allowEmptyGlobs, allowEmptyGlobs = _e === void 0 ? false : _e, createPipelinesRegistryImplementation = _a.createPipelinesRegistryImplementation, importModulesImplementation = _a.importModulesImplementation;
    return __awaiter(void 0, void 0, void 0, function () {
        var pipelinesRegistry, moduleWrappers, _i, moduleWrappers_1, moduleWrapper, pipeline;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (!fileGlobs || fileGlobs.length === 0) {
                        throw new Error('no pipeline config file search patterns specified');
                    }
                    pipelinesRegistry = createPipelinesRegistryImplementation
                        ? createPipelinesRegistryImplementation(existingConfig)
                        : pipelinesRegistry_1.createPipelinesRegistry(existingConfig);
                    moduleWrappers = importModulesImplementation
                        ? importModulesImplementation({ fileGlobs: fileGlobs, workingDirectory: workingDirectory, allowEmptyGlobs: allowEmptyGlobs })
                        : utils_1.importModules({ fileGlobs: fileGlobs, workingDirectory: workingDirectory, allowEmptyGlobs: allowEmptyGlobs });
                    _i = 0, moduleWrappers_1 = moduleWrappers;
                    _f.label = 1;
                case 1:
                    if (!(_i < moduleWrappers_1.length)) return [3 /*break*/, 4];
                    moduleWrapper = moduleWrappers_1[_i];
                    return [4 /*yield*/, moduleWrapper.import()];
                case 2:
                    pipeline = _f.sent();
                    if (pipeline && pipeline.config) {
                        pipeline.config(pipelinesRegistry);
                    }
                    else {
                        throw new Error("pipeline config module doesn't export a \"config\" method: " + moduleWrapper.file);
                    }
                    _f.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, pipelinesRegistry.getPipelines()];
            }
        });
    });
};
exports.configLoader = config;
