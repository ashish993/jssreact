"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var enhanceProcessors = function (processors) {
    return processors.map(function (processor) {
        if (processor.modulePath) {
            var importArgs = {
                fileGlobs: [processor.modulePath],
            };
            if (processor.modulePath.workingDirectory && processor.modulePath.filePath) {
                importArgs.fileGlobs = [processor.modulePath.filePath];
                importArgs.workingDirectory = processor.modulePath.workingDirectory;
            }
            return __assign(__assign({}, processor), { moduleWrapper: utils_1.importModules(importArgs)[0] });
        }
        return processor;
    });
};
var runProcessor = function (_a) {
    var processor = _a.processor, args = _a.args;
    return __awaiter(void 0, void 0, void 0, function () {
        var processorArgs, otherProcessorInfo, mergedArgs, result, module_1, resultArgs;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (args && args.debug) {
                        console.log("executing processor " + processor.name);
                    }
                    processorArgs = processor.args, otherProcessorInfo = __rest(processor, ["args"]);
                    mergedArgs = __assign(__assign(__assign({}, args), processorArgs), { processor: __assign({}, otherProcessorInfo) });
                    if (!(typeof processor.process === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, processor.process(mergedArgs)];
                case 1:
                    result = _b.sent();
                    return [2 /*return*/, result];
                case 2:
                    if (!processor.moduleWrapper) return [3 /*break*/, 4];
                    return [4 /*yield*/, processor.moduleWrapper.import()];
                case 3:
                    module_1 = _b.sent();
                    if (module_1.default) {
                        resultArgs = module_1.default(mergedArgs);
                        // resultArgs can be a promise or object, so this abort check won't work if resultArgs is a promise
                        if (resultArgs.abort) {
                            throw new Error('abort');
                        }
                        return [2 /*return*/, resultArgs];
                    }
                    return [2 /*return*/, args];
                case 4: throw new Error("Pipeline processor '" + processor.name + "' does not specify 'modulePath' or 'process'");
            }
        });
    });
};
/**
 * @param {Object} args
 * @param {Processor[]} args.processors the processors to run (optional but must be specified if pipeline is not specified)
 * @param {any} args.pipelineArgs arguments to pass to the pipeline processors
 */
exports.runProcessors = function (_a) {
    var processors = _a.processors, _b = _a.pipelineArgs, pipelineArgs = _b === void 0 ? {} : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        var finalProcessors, pipelineResult, _i, finalProcessors_1, processor;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!processors || processors.length === 0) {
                        throw new Error('no processors specified to run');
                    }
                    finalProcessors = enhanceProcessors(processors);
                    pipelineResult = pipelineArgs;
                    _i = 0, finalProcessors_1 = finalProcessors;
                    _c.label = 1;
                case 1:
                    if (!(_i < finalProcessors_1.length)) return [3 /*break*/, 4];
                    processor = finalProcessors_1[_i];
                    return [4 /*yield*/, runProcessor({ processor: processor, args: pipelineResult })];
                case 2:
                    // eslint-disable-next-line no-await-in-loop
                    pipelineResult = _c.sent();
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, pipelineResult];
            }
        });
    });
};
/**
 * @param {ExecutablePipeline} pipeline the pipeline to run (optional but must be specified if processors is not specified)
 */
exports.run = function (pipeline) { return __awaiter(void 0, void 0, void 0, function () {
    var pipelineName, pipelineResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!pipeline || !pipeline.processors() || pipeline.processors().length === 0) {
                    throw new Error('no pipeline processors have been defined');
                }
                pipelineName = pipeline ? "\"" + pipeline.name + "\" " : '';
                if (pipeline.args.debug) {
                    console.log("\npipeline " + pipelineName + "started");
                }
                return [4 /*yield*/, exports.runProcessors({
                        processors: pipeline.processors(),
                        pipelineArgs: pipeline.args,
                    })];
            case 1:
                pipelineResult = _a.sent();
                if (pipeline.args.debug) {
                    console.log("pipeline " + pipelineName + "complete");
                }
                return [2 /*return*/, pipelineResult];
        }
    });
}); };
/**
 * Run a pipeline, loading specified compilers first
 * @param {any} compilers
 * @returns {any} pipeline result
 */
exports.runWithCompilers = function (compilers) { return function (pipeline) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.initCompilers(compilers)];
            case 1:
                _a.sent();
                return [2 /*return*/, exports.run(pipeline)];
        }
    });
}); }; };
