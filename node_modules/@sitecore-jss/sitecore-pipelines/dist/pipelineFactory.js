"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var pipeline_1 = require("./pipeline");
exports.processorFactory = {
    create: function (name) {
        if (name === void 0) { name = ''; }
        return ({
            name: name,
            modulePath: '',
            args: {},
        });
    },
};
exports.pipelineFactory = {
    /**
     * Create a pipeline
     * @param {string} [name]
     * @returns {Pipeline} pipeline
     */
    create: function (name) {
        if (name === void 0) { name = ''; }
        var processors = [];
        var args = {}; // inconsistent API, this will be directly mutable, but processors not? Que pasa con eso?
        var addProcessor = function (processor) {
            var found = processors.findIndex(function (proc) { return proc.name === processor.name; });
            if (found === -1) {
                processors.push(__assign({}, processor)); // weak attempt at immutability
            }
            else {
                console.warn("processor \"" + processor.name + "\" already exists. you may experience unexpected results when trying to reference the processor by name.");
            }
        };
        var updateProcessor = function (processor, processorName) {
            if (processorName === void 0) { processorName = ''; }
            var procName = processorName || processor.name;
            if (!procName) {
                throw new Error('no processor name specified for call to "updateProcessor", you must specify either' +
                    ' processor.name or pass in a name via the "processorName" argument.');
            }
            var found = processors.findIndex(function (proc) { return proc.name === procName; });
            if (found !== -1) {
                processors[found] = __assign({}, processor);
            }
            else {
                throw new Error("processor \"" + procName + "\" not found, can't be updated");
            }
        };
        var getProcessor = function (processorName) {
            var processor = processors.find(function (proc) { return proc.name === processorName; });
            return processor ? __assign({}, processor) : null; // weak attempt at immutability
        };
        var getProcessors = function (predicate) {
            if (predicate) {
                return predicate(__spreadArrays(processors)); // weak attempt at immutability
            }
            return __spreadArrays(processors); // weak attempt at immutability
        };
        var run = function () { return __awaiter(void 0, void 0, void 0, function () {
            var pipeline;
            return __generator(this, function (_a) {
                pipeline = { name: name, processors: getProcessors, args: args };
                return [2 /*return*/, pipeline_1.run(pipeline)];
            });
        }); };
        var runWithCompilers = function (compilers) { return __awaiter(void 0, void 0, void 0, function () {
            var pipeline;
            return __generator(this, function (_a) {
                pipeline = { name: name, processors: getProcessors };
                return [2 /*return*/, pipeline_1.runWithCompilers(compilers)(pipeline)];
            });
        }); };
        return {
            name: name,
            args: args,
            addProcessor: addProcessor,
            updateProcessor: updateProcessor,
            getProcessor: getProcessor,
            getProcessors: getProcessors,
            processors: getProcessors,
            run: run,
            runWithCompilers: runWithCompilers,
        };
    },
};
