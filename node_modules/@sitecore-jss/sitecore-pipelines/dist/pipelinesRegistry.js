"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPipelinesRegistry = function (existingPipelines) {
    if (existingPipelines === void 0) { existingPipelines = {}; }
    var pipelines = __assign({}, existingPipelines);
    var addPipeline = function (pipeline) {
        var found = pipelines[pipeline.name];
        if (!found) {
            pipelines[pipeline.name] = __assign({}, pipeline); // weak attempt at immutability
        }
        else {
            console.warn("pipeline \"" + pipeline.name + "\" already exists. you may experience unexpected results when trying to reference the pipeline by name.");
        }
    };
    var updatePipeline = function (pipeline, pipelineName) {
        if (pipelineName === void 0) { pipelineName = ''; }
        var pipeName = pipelineName || pipeline.name;
        if (!pipeName) {
            throw new Error('no pipeline name specified for call to "updatePipeline", ' +
                'you must specify either pipeline.name or pass in a name via the "pipelineName" argument.');
        }
        var found = pipelines[pipeName];
        if (found) {
            pipelines[pipeName] = __assign({}, pipeline); // weak attempt at immutability
        }
        else {
            throw new Error("pipeline \"" + pipeName + "\" not found, can't be updated");
        }
    };
    var deletePipeline = function (pipelineName) {
        if (pipelines[pipelineName]) {
            delete pipelines[pipelineName];
        }
    };
    var getPipeline = function (pipelineName) { return (__assign({}, pipelines[pipelineName])); }; // weak attempt at immutability
    var getPipelines = function () { return (__assign({}, pipelines)); }; // weak attempt at immutability
    return {
        addPipeline: addPipeline,
        updatePipeline: updatePipeline,
        deletePipeline: deletePipeline,
        getPipeline: getPipeline,
        getPipelines: getPipelines,
    };
};
