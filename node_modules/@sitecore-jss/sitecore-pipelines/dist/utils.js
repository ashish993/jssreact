"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var glob_1 = require("glob");
var nodePath = require("path");
// inspired by 'lookupFiles' method: https://github.com/mochajs/mocha/blob/master/lib/utils.js
exports.resolveFiles = function (_a) {
    var fileGlob = _a.fileGlob, extensions = _a.extensions, recursive = _a.recursive, workingDirectory = _a.workingDirectory, _b = _a.allowEmptyGlobs, allowEmptyGlobs = _b === void 0 ? false : _b;
    var files = [];
    var lookupPath = fileGlob;
    var re = new RegExp("\\.(" + extensions.join('|') + ")$");
    if (!fs_1.existsSync(lookupPath)) {
        if (fs_1.existsSync(lookupPath + ".js")) {
            lookupPath += '.js';
        }
        if (fs_1.existsSync(lookupPath + ".ts")) {
            lookupPath += '.ts';
        }
        else {
            var options = {};
            if (workingDirectory) {
                options.cwd = workingDirectory;
            }
            files = glob_1.sync(lookupPath, options);
            if (!files.length) {
                if (allowEmptyGlobs) {
                    console.warn("path or pattern '" + lookupPath + "' did not match any files.");
                }
                else {
                    throw new Error("cannot resolve path (or pattern) '" + lookupPath + "'");
                }
            }
            return files;
        }
    }
    try {
        var stat = fs_1.statSync(lookupPath);
        if (stat.isFile()) {
            return lookupPath;
        }
    }
    catch (err) {
        // ignore error
        return [];
    }
    fs_1.readdirSync(lookupPath).forEach(function (file) {
        var filePath = nodePath.join(lookupPath, file);
        var stat;
        try {
            stat = fs_1.statSync(filePath);
            if (stat.isDirectory()) {
                if (recursive) {
                    files = files.concat(exports.resolveFiles({ fileGlob: filePath, extensions: extensions, recursive: recursive, workingDirectory: workingDirectory }));
                }
                return;
            }
        }
        catch (err) {
            // ignore error
            return;
        }
        if (!stat.isFile() || !re.test(filePath) || nodePath.basename(filePath)[0] === '.') {
            return;
        }
        var resolvedPath = nodePath.resolve(filePath);
        files.push(resolvedPath);
    });
    return files;
};
exports.importModules = function (_a) {
    var _b = _a.fileGlobs, fileGlobs = _b === void 0 ? [] : _b, _c = _a.workingDirectory, workingDirectory = _c === void 0 ? '' : _c, _d = _a.allowEmptyGlobs, allowEmptyGlobs = _d === void 0 ? false : _d;
    var resolved = fileGlobs.reduce(function (initialResult, fileGlob) {
        var result = initialResult;
        if (fileGlob) {
            result = result.concat(exports.resolveFiles({
                fileGlob: fileGlob,
                extensions: ['.js'],
                recursive: true,
                workingDirectory: workingDirectory,
                allowEmptyGlobs: allowEmptyGlobs,
            }));
        }
        return result;
    }, []);
    // wrap import() in a function so we can control when the promise starts to resolve.
    // otherwise, promises start to resolve immediately upon creation.
    var modules = resolved.map(function (file) { return ({
        file: file,
        import: function () { return Promise.resolve().then(function () { return require(nodePath.resolve(workingDirectory, file)); }); },
    }); });
    return modules;
};
exports.initCompilers = function (compilers) {
    if (compilers === void 0) { compilers = []; }
    return __awaiter(void 0, void 0, void 0, function () {
        var imports, _i, compilers_1, compiler;
        return __generator(this, function (_a) {
            if (!compilers || compilers.length === 0) {
                console.warn('no compilers specified for initCompilers');
                return [2 /*return*/, Promise.resolve()];
            }
            imports = [];
            // eslint-disable-next-line no-restricted-syntax
            for (_i = 0, compilers_1 = compilers; _i < compilers_1.length; _i++) {
                compiler = compilers_1[_i];
                // not entirely sure why this works... i assume we would need to call .then() after import() and subsequently
                // call the default export of the imported module (assuming it's a function).
                // probably compiler-specific, depending on how they export, something to be aware
                // of if people use something other than `babel-core/register`.
                imports.push(Promise.resolve().then(function () { return require(compiler); }));
            }
            return [2 /*return*/, Promise.all(imports)];
        });
    });
};
